<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BearZPY Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bearzpy.github.io/"/>
  <updated>2018-04-12T07:28:37.530Z</updated>
  <id>https://bearzpy.github.io/</id>
  
  <author>
    <name>BearZPY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高性能 log 组件 xlog</title>
    <link href="https://bearzpy.github.io/2018/04/10/Android/%E9%AB%98%E6%80%A7%E8%83%BD%20log%20%E7%BB%84%E4%BB%B6%20xlog/"/>
    <id>https://bearzpy.github.io/2018/04/10/Android/高性能 log 组件 xlog/</id>
    <published>2018-04-10T08:23:47.000Z</published>
    <updated>2018-04-12T07:28:37.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高性能-log-组件-xlog"><a href="#高性能-log-组件-xlog" class="headerlink" title="高性能 log 组件 xlog"></a>高性能 log 组件 xlog</h1><p>移动开发中遇到的最烦的问题就是用户反馈的问题不能复现，而且也没有日志能够协助定位问题。实际日志系统都会在 release 版本中关闭绝大部分的记录，以免频繁的 IO 读写影响应用的流畅度。在遇到问题之后，想解决问题可能还要联系用户发布特定版本，需要用户配合重现定位问题，实际操作上难度也是很高的。在这种情况下，自己也尝试着优化过日志系统，但是并没有特别好的效果，依然有 CPU 峰值高和丢 log 的现象，最近发现了腾讯开源的微信终端基础组件 Mars，内置了一个高性能 log 组件 xlog，且能够单独提取使用，所以了解学习一下。</p>
<h2 id="Mars-简介"><a href="#Mars-简介" class="headerlink" title="Mars 简介"></a>Mars 简介</h2><p>Mars 是微信官方的终端基础组件，是一个使用 C++ 编写的业务性无关，平台性无关的基础组件，目前可接入平台：Android、iOS、Mac、Windows、WP 等。</p>
<p>主要包括以下几个部分：</p>
<ul>
<li>comm：可以独立使用的公共库，包括 socket、线程、消息队列、协程等</li>
<li>xlog：可以独立使用的高性能日志模块</li>
<li>sdt：可以独立使用的网络诊断模块</li>
<li>stn：可以独立使用的信令分发网络模块</li>
</ul>
<h2 id="xlog-方案"><a href="#xlog-方案" class="headerlink" title="xlog 方案"></a>xlog 方案</h2><p>xlog 方案简述：</p>
<ul>
<li>使用流式方式对单行日志进行压缩，压缩加密后写进作为 log 中间 buffer 的 mmap 中。</li>
</ul>
<p>流式压缩：</p>
<ul>
<li>流式压缩是相对与多条日志同时压缩的，就是对日志按队列压缩。流式压缩的耗时是使用多条日志同时压缩的 2.5 倍左右，但这个时间基数是微秒级的，而且多条日志同时压缩会造成 CPU 曲线极速升高可能会导致程序卡顿，而流式压缩是把时间分散在整个生命周期内，CPU 的曲线更平滑。压缩使用的是 LZ77 编码。</li>
</ul>
<p>数据加密：</p>
<ul>
<li>数据加密是为了安全，数据加密一定要放在压缩后，这样可以让减少数据量，加密使用非对称密钥加密，客户端使用公钥加密，log 文件上传后用私钥解密。加解密需要 PC 机上有 pyelliptic，openssl，python 环境。</li>
</ul>
<p>mmap 存储：</p>
<ul>
<li>mmap 是使用逻辑内存对磁盘文件进行映射，中间只是进行映射没有任何拷贝操作，避免了写文件的数据拷贝。 操作内存就相当于在操作文件，避免了内核空间和用户空间的频繁切换。目前分配内存 150kb。</li>
</ul>
<p>xlog 方案自定义：</p>
<ul>
<li>xlog 源码都是开源的可以自行修改配制，及是否压缩加密都是可以自定义的。</li>
<li>在架构设计上也考虑了扩展性，比如日志头部的结构体是可以随意修改的。</li>
<li>输出到文件的主要实现是在 Appender 模块也是可插拔的，如果对默认的策略不满意可以自己实现一套。</li>
</ul>
<p>xlog 其他策略：</p>
<ul>
<li>每次启动的时候会清理日志，防止占用太多用户磁盘空间。</li>
<li>为了防止 sdcard 被拔掉导致写不了日志，支持设置缓存目录，当 sdcard 插上时会把缓存目录里的日志写入到 sdcard 上.</li>
<li>…等</li>
</ul>
<h2 id="xlog-环境接入"><a href="#xlog-环境接入" class="headerlink" title="xlog 环境接入"></a>xlog 环境接入</h2><p>gradle 接入：</p>
<p>gradle 接入使用的日志加密算法是不加密的，如需自定义请参考本地编译。注意 gradle 接入因为考虑依赖包体积的大小，只提供了 armeabi 和 x86_64 两种 CPU 架构的 so， 如果你使用的其他 so 有其他架构的，务必不要使用 gradle 依赖，参考本地编译编出你需要的 so，否则会报 Couldn’t find “xxxx.so”的错误。</p>
<pre><code>dependencies {
    implementation &#39;com.tencent.mars:mars-xlog:1.0.6&#39;
}
</code></pre><p>本地编译：</p>
<p>本地编译需要下载 Mars 源码，ndk-r11c 版本，编译脚本都在 libraries 目录，需在该目录下运行，参照 Mars 的 Wiki 页面。</p>
<pre class=" language-shell"><code class="language-shell">python build_android.py

选择编译下面两个 lib 输出结果全部在 mars_xlog_sdk 目录中
build xlog static libs.
build xlog shared libs.

复制 so 库以及相应的源码到工程中
</code></pre>
<h2 id="xlog-使用"><a href="#xlog-使用" class="headerlink" title="xlog 使用"></a>xlog 使用</h2><p>添加权限</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.WRITE_EXTERNAL_STORAGE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<p>推荐项目开始时加载 so 库</p>
<pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"stlport_shared"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"marsxlog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>初始化 xlog  </p>
<ul>
<li>Xlog.LEVEL_DEBUG 代表输出 log 等级</li>
<li>Xlog.AppednerModeAsync 代表异步记录文件，不建议改成同步</li>
<li>cachePath 缓存区，没有外部地址，就存在这里</li>
<li>logPath 外部地址</li>
<li>nameprefix 日志文件前缀</li>
<li>PUB_KEY 加密公钥</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> String SDCARD <span class="token operator">=</span> Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> String logPath <span class="token operator">=</span> SDCARD <span class="token operator">+</span> <span class="token string">"/marssample/log"</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// this is necessary, or may cash for SIGBUS</span>
<span class="token keyword">final</span> String cachePath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFilesDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/xlog"</span>
<span class="token keyword">final</span> String nameprefix <span class="token operator">=</span> <span class="token string">"MarsSample"</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> String PUB_KEY <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//init xlog</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>BuildConfig<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Xlog<span class="token punctuation">.</span><span class="token function">appenderOpen</span><span class="token punctuation">(</span>Xlog<span class="token punctuation">.</span>LEVEL_DEBUG<span class="token punctuation">,</span> Xlog<span class="token punctuation">.</span>AppednerModeAsync<span class="token punctuation">,</span> cachePath<span class="token punctuation">,</span> logPath<span class="token punctuation">,</span> nameprefix<span class="token punctuation">,</span> PUB_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Xlog<span class="token punctuation">.</span><span class="token function">setConsoleLogOpen</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    Xlog<span class="token punctuation">.</span><span class="token function">appenderOpen</span><span class="token punctuation">(</span>Xlog<span class="token punctuation">.</span>LEVEL_INFO<span class="token punctuation">,</span> Xlog<span class="token punctuation">.</span>AppednerModeAsync<span class="token punctuation">,</span> cachePath<span class="token punctuation">,</span> logPath<span class="token punctuation">,</span> nameprefix<span class="token punctuation">,</span> PUB_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Xlog<span class="token punctuation">.</span><span class="token function">setConsoleLogOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Log<span class="token punctuation">.</span><span class="token function">setLogImp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Xlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>程序结束后反初始化 xlog</p>
<ul>
<li>这里一定要调用这个，不然在异步记录的时候，最后的部分 log 可能不会写入文件中。</li>
</ul>
<pre class=" language-java"><code class="language-java">Log<span class="token punctuation">.</span><span class="token function">appenderClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>调用方式：</p>
<pre class=" language-java"><code class="language-java">Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"onCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>解析 .xlog 文件</p>
<ul>
<li>使用 decode_mars_nocrypt_log_file.py，可以解析压缩但是未加密的 .xlog 文件，会在当前目录下生产一个 .log 后缀的文件。</li>
<li>使用 decode_mars_crypt_log_file.py，可以解析压缩加密的 .xlog 文件，需要设置 Pubkey 和 Prikey。</li>
</ul>
<p>额外注意：</p>
<ul>
<li>如果你的程序使用了多进程，不要把多个进程的日志输出到同一个文件中，保证每个进程独享一个日志文件。</li>
<li>保存 log 的目录请使用单独的目录，不要存放任何其他文件防止被 xlog 自动清理功能误删，会清楚 10 天前的文件。</li>
<li>debug 版本下建议把控制台日志打开，日志级别设为 Verbose 或者 Debug, release 版本建议把控制台日志关闭，日志级别使用 Info.</li>
<li>cachePath 这个参数必传，而且要 data 下的私有文件目录，例如 /data/data/packagename/files/xlog，mmap 文件会放在这个目录，如果传空串，可能会发生 SIGBUS 的 crash。</li>
</ul>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>实测 Log.appenderClose() 不能在 Application 类的 onTerminate() 函数中调用，根据 API 文档，该函数只在模拟设备时才会调用，真实设备里不会调用该函数。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高性能-log-组件-xlog&quot;&gt;&lt;a href=&quot;#高性能-log-组件-xlog&quot; class=&quot;headerlink&quot; title=&quot;高性能 log 组件 xlog&quot;&gt;&lt;/a&gt;高性能 log 组件 xlog&lt;/h1&gt;&lt;p&gt;移动开发中遇到的最烦的问题就是用户反
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="log" scheme="https://bearzpy.github.io/tags/log/"/>
    
      <category term="xlog" scheme="https://bearzpy.github.io/tags/xlog/"/>
    
      <category term="Mars" scheme="https://bearzpy.github.io/tags/Mars/"/>
    
      <category term="Tencent" scheme="https://bearzpy.github.io/tags/Tencent/"/>
    
  </entry>
  
  <entry>
    <title>实现 UTF8 和 GBK 编码的互转</title>
    <link href="https://bearzpy.github.io/2018/03/14/encode/%E5%AE%9E%E7%8E%B0%20UTF8%20%E5%92%8C%20GBK%20%E7%BC%96%E7%A0%81%E7%9A%84%E4%BA%92%E8%BD%AC/"/>
    <id>https://bearzpy.github.io/2018/03/14/encode/实现 UTF8 和 GBK 编码的互转/</id>
    <published>2018-03-14T08:23:47.000Z</published>
    <updated>2018-03-30T01:23:35.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现-UTF8-和-GBK-编码的互转"><a href="#实现-UTF8-和-GBK-编码的互转" class="headerlink" title="实现 UTF8 和 GBK 编码的互转"></a>实现 UTF8 和 GBK 编码的互转</h1><p>工作需要自己实现 UTF8 和 GBK 编码的互转，本文记录实现的思路方法。</p>
<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>UTF8 本质是 Unicode 标准的一种实现方式，UTF8 编码和 Unicode 字符码是有相互转换的规则的。GBK 码与 Unicode 字符码是没有设计有规律的对应关系的，即没有相互转换的规则。所以想要实现 UTF8 和 GBK 编码互转需要依靠查表法，即 UTF8 转 GBK 编码需要先按规则转换成 Unicode 字符码，再通过查表获取该 Unicode 字符码对应的 GBK 码，同样的 GBK 转 UTF8 编码也需要先查表获取对应的 Unicode 字符码，再按照规则转换成 UTF8 编码。</p>
<h2 id="获取-GBK-和-Unicode-的编码对应表"><a href="#获取-GBK-和-Unicode-的编码对应表" class="headerlink" title="获取 GBK 和 Unicode 的编码对应表"></a>获取 GBK 和 Unicode 的编码对应表</h2><p>这里介绍两个编码对应表，分别是 CP936 编码表，和汉字 Unicode 编码表，包含的汉字都是基本汉字，一共 20902 个。除去 ASCII 字符外，这些编码中包括的汉字都是两个字节的长度。 其中 CP936 编码表是按照递增的 GBK 编码值为索引的，对应值是 Unicode 编码，（由于 GBK 的编码并不是连续的，所有索引之间往往有空缺），而汉字 Unicode 编码表是以递增的 Unicode 汉字字符码为索引的，对应值是 GBK 编码（Unicode 编码范围 4E00-9FA5） 。</p>
<h2 id="实现互转"><a href="#实现互转" class="headerlink" title="实现互转"></a>实现互转</h2><p>在获取编码表之后，想要实现 GBK 和 Unicode 互转的功能就没有什么难度了，最简单的方法就是定义一个编码数组包含 GBK 和 Unicode 的映射关系，然后对所需要转换的编码进行查表，获取对应编码再拼接成一个数据串就完成了。</p>
<p>采用 CP936 编码表：<br>需要定义一个 short 型二维数组存放 GBK 和 Unicode 的映射关系（因为 GBK 编码值不是递增的，中间有很多未使用的值），无论是 GBK 转 Unicode 还是 Unicode 转 GBK 使用时最长需要遍历整个数组。</p>
<p>采用汉字 Unicode 编码表：<br>需要定义一个 short 型一维数组，存放从 4E00-9FA5 直接的汉字字符，Unicode 的编码字符减去 4E00 既是一维数组的索引。在 Unicode 转 GBK 时可以直接计算出对应 GBK 的索引值，直接获取该编码值即可。在 GBK 转 Unicode 的时候最长需要遍历整个数组。</p>
<p>明显可以看出来，使用汉字 Unicode 编码表的时间复杂度和空间复杂度是低于使用 CP936 编码表的，不做优化的话，这里肯定选择汉字 Unicode 编码表。</p>
<h2 id="优化占用空间"><a href="#优化占用空间" class="headerlink" title="优化占用空间"></a>优化占用空间</h2><p>缺点：<br>上面虽然实现了 GBK 和 Unicode 的互相转换，但是在程序里面定一个 20902 长度的 short 数组还是太臃肿了，而且在某些情况嵌入式系统中是不允许定义这么多的。</p>
<p>优化：<br>这里我们可以把编码表改造成字库文件。在带操作系统的环境下以读取文件的方式来读取字符编码。在嵌入式系统中没有文件系统的环境下，我们可以把字库文件烧入 Flash，以读取 Flash 的方式来读取字符编码。</p>
<p>制作字库文件：<br>汉字 Unicode 编码表制作字库文件并不复杂，新建一个 .txt 文件（以 ANSI 格式打开），将 Unicode 4E00-9FA5 对应的 GBK 编码依次复制到文件中保存，修改名字为 GBK.bin 就可以了。（这里 GBK.bin 是没有文件头和校验值的，直接按照索引读取就行，需要注意的事这里不能有换行符）</p>
<h2 id="优化查找编码速度"><a href="#优化查找编码速度" class="headerlink" title="优化查找编码速度"></a>优化查找编码速度</h2><p>缺点：<br>使用 GBK.bin 优化了程序占用的空间，但是 GBK 转 Unicode 的时候最长仍需要遍历整个字库文件，而且有一部分常用的字符是在 4E00-9FA5 后段部分的，这就导致了很多情况下查找效率的降低。</p>
<p>优化：<br>汉字 Unicode 编码表是根据 Unicode 排序的，CP936 编码表是根据 GBK 排序的，我们可以将 CP936 编码表也制作成字库 CP936.bin，在 GBK 转 Unicode 的时候使用字库 CP936.bin，在 Unicode 转 GBK 时使用 GBK.bin，这样互转都是按照编码索引转换成字库索引直接读取对应字库，就省去了遍历的过程。</p>
<p>制作字库文件：  </p>
<pre class=" language-c"><code class="language-c">CP936 编码表中的一部分

GBK     Unicode
<span class="token number">0x81FD</span>    <span class="token number">0x4FA1</span>
<span class="token number">0x81FE</span>    <span class="token number">0x4FA2</span>
<span class="token number">0x8240</span>    <span class="token number">0x4FA4</span>
<span class="token number">0x8241</span>    <span class="token number">0x4FAB</span>
</code></pre>
<p>如上所示，GBK 的索引是不连续的，81FE 后面接的是 8240，实际上整个 CP936 中类似于此的断层大概有一百多处，每处缺少的数目是不一样的，这里我们可以通过编写程序将其补全索引，对于的 Unicode 的值设置成 0000，并写入 GBK.bin 文件（这里对于大的断层我们进过滤，并在后面的索引计算中进行特殊处理，以免补出来的 bin 文件过大）。</p>
<h2 id="优化字串转换速度"><a href="#优化字串转换速度" class="headerlink" title="优化字串转换速度"></a>优化字串转换速度</h2><p>上面都是单个编码去计算索引，读取文件获取编码返回，在大量的字符串转换的时候会有很多冗余的操作，我们可以进行流程上的优化，把所有需要获取的字符编码先全部转换成索引，然后在去字库中一次将所有需要的内容都读出来统一返回，这样减少了流程上的调用。</p>
<h2 id="UTF8-和-Unicode-的互转"><a href="#UTF8-和-Unicode-的互转" class="headerlink" title="UTF8 和 Unicode 的互转"></a>UTF8 和 Unicode 的互转</h2><p>GBK 和 Unicode 的互转已经实现了，剩下的就是 UTF8 和 Unicode 的转换，这部分就有固定的转换规则如下：</p>
<p>UTF8 编码规则：如果只有一个字节则其最高二进制位为 0，如果是多字节，其第一个字节从最高位开始，连续的二进制位值为 1，1 的个数决定了其编码的字节数，其余各字节均以 10 开头。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Unicode6.1定义范围：0~10 FFFF</span>
<span class="token comment" spellcheck="true">// 20 0000 ~ 3FF FFFF 和 400 0000 ~ 7FFF FFFF 属于 UCS-4，UTF8 现在已经弃用了这部分内容</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
n <span class="token operator">|</span> <span class="token function">Unicode</span> <span class="token punctuation">(</span>十六进制<span class="token punctuation">)</span>     <span class="token operator">|</span> UTF <span class="token operator">-</span> <span class="token function">8</span> <span class="token punctuation">(</span>二进制<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token operator">-</span> <span class="token number">0000</span> <span class="token number">007F</span> <span class="token operator">|</span> 0xxxxxxx
<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">0000</span> <span class="token number">0080</span> <span class="token operator">-</span> <span class="token number">0000</span> 07FF <span class="token operator">|</span> 110xxxxx 10xxxxxx
<span class="token number">3</span> <span class="token operator">|</span> <span class="token number">0000</span> <span class="token number">0800</span> <span class="token operator">-</span> <span class="token number">0000</span> FFFF <span class="token operator">|</span> 1110xxxx 10xxxxxx 10xxxxxx
<span class="token number">4</span> <span class="token operator">|</span> <span class="token number">0001</span> <span class="token number">0000</span> <span class="token operator">-</span> <span class="token number">0010</span> FFFF <span class="token operator">|</span> 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment" spellcheck="true">// 以下部分弃用</span>
<span class="token number">5</span> <span class="token operator">|</span> <span class="token number">0020</span> <span class="token number">0000</span> <span class="token operator">-</span> 03FF FFFF <span class="token operator">|</span> 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
<span class="token number">6</span> <span class="token operator">|</span> <span class="token number">0400</span> <span class="token number">0000</span> <span class="token operator">-</span> 7FFF FFFF <span class="token operator">|</span> 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
</code></pre>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现-UTF8-和-GBK-编码的互转&quot;&gt;&lt;a href=&quot;#实现-UTF8-和-GBK-编码的互转&quot; class=&quot;headerlink&quot; title=&quot;实现 UTF8 和 GBK 编码的互转&quot;&gt;&lt;/a&gt;实现 UTF8 和 GBK 编码的互转&lt;/h1&gt;&lt;p&gt;工作
    
    </summary>
    
      <category term="C" scheme="https://bearzpy.github.io/categories/C/"/>
    
    
      <category term="UTF8" scheme="https://bearzpy.github.io/tags/UTF8/"/>
    
      <category term="Unicode" scheme="https://bearzpy.github.io/tags/Unicode/"/>
    
      <category term="GBK" scheme="https://bearzpy.github.io/tags/GBK/"/>
    
      <category term="C" scheme="https://bearzpy.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Android APK 裁剪体积</title>
    <link href="https://bearzpy.github.io/2018/01/07/Android/Android%20APK%20%E8%A3%81%E5%89%AA%E4%BD%93%E7%A7%AF/"/>
    <id>https://bearzpy.github.io/2018/01/07/Android/Android APK 裁剪体积/</id>
    <published>2018-01-07T10:56:42.000Z</published>
    <updated>2018-04-11T03:03:51.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-APK-裁剪体积"><a href="#Android-APK-裁剪体积" class="headerlink" title="Android APK 裁剪体积"></a>Android APK 裁剪体积</h1><p>目前编译生成的 APK 体积越来越大，就有了缩小 APK 大小的需求，本文整理了 APK 裁剪的基本方案。</p>
<h2 id="主要方向"><a href="#主要方向" class="headerlink" title="主要方向"></a>主要方向</h2><p>对 APK 大小进行裁剪有下面几个基本切入点</p>
<ul>
<li>图片资源</li>
<li>代码（jar 包，so 库）</li>
<li>资源混淆</li>
</ul>
<p>对这几个切入点，可以利用 Android Studio 提供的工具 Analyze APK 来分析各项资源在 APK 大小中所占有的比例，还可以用来比较裁剪前后的 APK 差异，可以直观的观察到裁剪效果。</p>
<p>下面是 Analyze APK 中的几个名词概念：</p>
<ul>
<li>raw file size：文件在磁盘中解压后的大小</li>
<li>download file size：文件在 Google Play 中压缩后的大小</li>
<li>% of Total Download Size：文件的 download size 占总的 APK 的百分比</li>
</ul>
<h2 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h2><p>图片资源在 APP 中的占有的比例还是很高的，针对图片资源的优化也是最简单的，最容易看到效果的。大多数 APP 的图片资源主要都是 PNG 和 JPG，主要操作方法如下：</p>
<ul>
<li>删除无用资源</li>
<li>用 TinyPNG 压缩 PNG 图片，并将能转成 JPG 的图片进行转换</li>
<li>压缩 JPG 图片</li>
<li>使用 WebP 图片</li>
</ul>
<p>PS：<br>WebP 格式，google 开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器带宽资源和数据空间，WebP 解析速度快，但是编码速度慢，Android 4.1 才开始对WebP有了比较稳定的部分支持（即大多数只支持不含 alpha 通道的 WebP 图片），Android 4.2 才基本完全支持 WebP。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>简单的情况：<br>启用 ProGuard 代码混淆，删除无用代码，无用的 JAR 包，以及无用 so 库等等，可以很有效的减少 APK 的大小。</p>
<p>复杂的情况有下面几种：</p>
<ol>
<li><p>只使用了第三方 jar 包的很少部分的功能。</p>
<p> 可以选择把 jar 包中我们需要的内容提取出来，做一个精简版的 jar 包。还可以减少第三方 jar 包的升级，因为升级加了新特性包大小大概率要增加的  </p>
</li>
<li><p>代码中实现的功能较为重复。</p>
<p> 解决方案是进行基础功能组件化，增强代码复用</p>
</li>
<li><p>使用的多个第三方 jar 包包含了相同的功能的不同库，或者是相同库的不同版本。</p>
<p> 比如 Glide 和 Fresco，可以选择修改源代码，使用同一个库的同一个版本，再重新打包。</p>
</li>
<li><p>so 库过大或者 Dex 过大。</p>
<p> 使用动态加载 so 库的技术和 APK 插件化技术。</p>
</li>
</ol>
<h2 id="资源混淆"><a href="#资源混淆" class="headerlink" title="资源混淆"></a>资源混淆</h2><p>参照微信 Android 资源混淆打包工具，核心在于对 APK 中 resources.arsc 文件的修改，Android 项目中 res 目录下每个资源都有其对应的 ID，而 ID 在 R 文件下关联着资源名称，通过这些 ID 我们可以很方便的锁定某一项资源，而资源混淆的原理就在于对 ID 对应的资源路径进行优化处理（如将 res/drawable/xxx 修改成 res/drawable/a，或者修改为 r/d/a），通过这个方式可以大大减小 resources.arsc 文件的内容，从而达到减包的目的。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-APK-裁剪体积&quot;&gt;&lt;a href=&quot;#Android-APK-裁剪体积&quot; class=&quot;headerlink&quot; title=&quot;Android APK 裁剪体积&quot;&gt;&lt;/a&gt;Android APK 裁剪体积&lt;/h1&gt;&lt;p&gt;目前编译生成的 APK 体积
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="APK" scheme="https://bearzpy.github.io/tags/APK/"/>
    
      <category term="裁剪" scheme="https://bearzpy.github.io/tags/%E8%A3%81%E5%89%AA/"/>
    
  </entry>
  
  <entry>
    <title>Java 判断字节流是否是 UTF8 编码</title>
    <link href="https://bearzpy.github.io/2017/11/03/Java/Java%20%E5%88%A4%E6%96%AD%E5%AD%97%E8%8A%82%E6%B5%81%E6%98%AF%E5%90%A6%E6%98%AF%20UTF8%20%E7%BC%96%E7%A0%81/"/>
    <id>https://bearzpy.github.io/2017/11/03/Java/Java 判断字节流是否是 UTF8 编码/</id>
    <published>2017-11-03T07:01:27.000Z</published>
    <updated>2018-03-28T10:54:59.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-判断字节流是否是-UTF8-编码"><a href="#Java-判断字节流是否是-UTF8-编码" class="headerlink" title="Java 判断字节流是否是 UTF8 编码"></a>Java 判断字节流是否是 UTF8 编码</h1><p>遇到本来设计时使用 GBK 编码处理的地方，在实际使用过程导入了 UTF8 编码，造成了显示文本为乱码的现象，在了解 UTF8，GBK 编码和 Unicode 标准之后，编写了 Java 判断字节流是否是 UTF8 编码的程序，如果是 UTF8 编码，则转换成 GBK 编码。</p>
<h2 id="编码的基础知识"><a href="#编码的基础知识" class="headerlink" title="编码的基础知识"></a>编码的基础知识</h2><p>Unicode 是一种标准，GBK 和 UTF8 是具体是编码格式。Java 的字符都是以 Unicode 进行存储的，占两或四个字节（看版本，且 Unicode 编码中对应关系是存在 0x00 的编码的）。Java 中的 getBytes() 方法是和平台（编码）相关的，在中文系统中返回的可能是 GBK 或 GBK2312，在英文系统中返回的可能是 ISO-8859-1。</p>
<ul>
<li>Unicode 标准：是计算机科学领域里的一项业界标准，包括字符集、编码方案等，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</li>
<li>GBK 编码：汉字内码扩展规范，国标，汉字占两个字节。</li>
<li>UTF8 编码：针对 Unicode 的可变长度字符编码，用 1 到 6 个字节编码 Unicode 字符，汉字一般占 3 个字节。</li>
</ul>
<h2 id="UTF8-编码格式"><a href="#UTF8-编码格式" class="headerlink" title="UTF8 编码格式"></a>UTF8 编码格式</h2><p>如果 Unicode 字符由 2 个字节表示，则编码成 UTF8 很可能需要 3 个字节。而如果 Unicode 字符由 4 个字节表示，则编码成 UTF8 可能需要  6个字节。用 4 个或 6 个字节去编码一个 Unicode 字符可能太多了，但很少会遇到那样的 Unicode 字符。</p>
<p>UTF8 编码规则：如果只有一个字节则其最高二进制位为 0，如果是多字节，其第一个字节从最高位开始，连续的二进制位值为 1，1 的个数决定了其编码的字节数，其余各字节均以 10 开头。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Unicode6.1定义范围：0~10 FFFF</span>
<span class="token comment" spellcheck="true">// 20 0000 ~ 3FF FFFF 和 400 0000 ~ 7FFF FFFF 属于 UCS-4，UTF8 现在已经弃用了这部分内容</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
n <span class="token operator">|</span> <span class="token function">Unicode</span> <span class="token punctuation">(</span>十六进制<span class="token punctuation">)</span>    <span class="token operator">|</span> UTF <span class="token operator">-</span> <span class="token function">8</span> <span class="token punctuation">(</span>二进制<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token operator">-</span> <span class="token number">0000</span> <span class="token number">007F</span> <span class="token operator">|</span> 0xxxxxxx
<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">0000</span> <span class="token number">0080</span> <span class="token operator">-</span> <span class="token number">0000</span> 07FF <span class="token operator">|</span> 110xxxxx 10xxxxxx
<span class="token number">3</span> <span class="token operator">|</span> <span class="token number">0000</span> <span class="token number">0800</span> <span class="token operator">-</span> <span class="token number">0000</span> FFFF <span class="token operator">|</span> 1110xxxx 10xxxxxx 10xxxxxx
<span class="token number">4</span> <span class="token operator">|</span> <span class="token number">0001</span> <span class="token number">0000</span> <span class="token operator">-</span> <span class="token number">0010</span> FFFF <span class="token operator">|</span> 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment" spellcheck="true">// 以下部分弃用</span>
<span class="token number">5</span> <span class="token operator">|</span> <span class="token number">0020</span> <span class="token number">0000</span> <span class="token operator">-</span> 03FF FFFF <span class="token operator">|</span> 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
<span class="token number">6</span> <span class="token operator">|</span> <span class="token number">0400</span> <span class="token number">0000</span> <span class="token operator">-</span> 7FFF FFFF <span class="token operator">|</span> 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
</code></pre>
<h2 id="Java-如何判断单个字符编码是否是-UTF8"><a href="#Java-如何判断单个字符编码是否是-UTF8" class="headerlink" title="Java 如何判断单个字符编码是否是 UTF8"></a>Java 如何判断单个字符编码是否是 UTF8</h2><p>假设当前需要判定一个 byte[] 数组内的编码是否是 UTF8 编码，这个 byte[] 是 String 通过 getBytes() 方法获取的，判断单个字符的编码步骤如下：</p>
<ul>
<li>从 byte[] 数组中获取一个 byte 并将它转换成无符号类型的 int 变量 value</li>
<li>判断 value 是否是 ASCII 字符（小于 0x80）</li>
<li>判断 value 是否是无效字符（大于 0x80，小于 0xC0，参照 UTF8 编码规则）</li>
<li>确认该字符编码的是几字节 UTF8</li>
<li>确认该字符编码的除第一个字节外的字节是否满足 10xxxxxx 格式</li>
</ul>
<p>PS：  </p>
<p>Java getBytes() 获取的是带符号的十六进制，实际处理时需要使用无符号十六进制。</p>
<p>GBK 和 UTF8 中 ASCII 字符的值是一样的。</p>
<h2 id="具体程序"><a href="#具体程序" class="headerlink" title="具体程序"></a>具体程序</h2><p>将十六进制流中的所有编码按照单个判定的方式便利一遍，如果有不符合 UTF8 编码规则的字符出现，则该十六进制流就不是 UTF8 编码格式的字串。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">byteToUnsignedInt</span><span class="token punctuation">(</span><span class="token keyword">byte</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUTF8</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> IsUTF8 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> IsASCII <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> pBuffer<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">byteToUnsignedInt</span><span class="token punctuation">(</span>pBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// (10000000): 值小于 0x80 的为 ASCII 字符</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>IsASCII<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 假设纯 ASCII 字符不是 UTF 格式</span>
                    IsUTF8 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// (11000000): 值介于 0x80 与 0xC0 之间的为无效 UTF-8 字符</span>
            IsASCII <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            IsUTF8 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0xE0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// (11100000): 此范围内为 2 字节 UTF-8 字符</span>
            IsASCII <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token function">byteToUnsignedInt</span><span class="token punctuation">(</span>pBuffer<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value1 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                IsUTF8 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0xF0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            IsASCII <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// (11110000): 此范围内为 3 字节 UTF-8 字符</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token function">byteToUnsignedInt</span><span class="token punctuation">(</span>pBuffer<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> value2 <span class="token operator">=</span> <span class="token function">byteToUnsignedInt</span><span class="token punctuation">(</span>pBuffer<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value1 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x80</span> <span class="token operator">||</span> <span class="token punctuation">(</span>value2 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                IsUTF8 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0xF8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            IsASCII <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// (11111000): 此范围内为 4 字节 UTF-8 字符</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token function">byteToUnsignedInt</span><span class="token punctuation">(</span>pBuffer<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> value2 <span class="token operator">=</span> <span class="token function">byteToUnsignedInt</span><span class="token punctuation">(</span>pBuffer<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> value3 <span class="token operator">=</span> <span class="token function">byteToUnsignedInt</span><span class="token punctuation">(</span>pBuffer<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value1 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x80</span>
                <span class="token operator">||</span> <span class="token punctuation">(</span>value2 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x80</span>
                <span class="token operator">||</span> <span class="token punctuation">(</span>value3 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                IsUTF8 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            IsUTF8 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            IsASCII <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> IsUTF8<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="UTF8-编码转-GBK-编码"><a href="#UTF8-编码转-GBK-编码" class="headerlink" title="UTF8 编码转 GBK 编码"></a>UTF8 编码转 GBK 编码</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Unicode</span>
String unicodeString <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 获取 UTF8 编码</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nameUTF8 <span class="token operator">=</span> unicodeString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// UTF8 编码转 str</span>
String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 获取 GBK 编码</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nameGBK <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-判断字节流是否是-UTF8-编码&quot;&gt;&lt;a href=&quot;#Java-判断字节流是否是-UTF8-编码&quot; class=&quot;headerlink&quot; title=&quot;Java 判断字节流是否是 UTF8 编码&quot;&gt;&lt;/a&gt;Java 判断字节流是否是 UTF8 编码&lt;/
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="Java" scheme="https://bearzpy.github.io/tags/Java/"/>
    
      <category term="UTF8" scheme="https://bearzpy.github.io/tags/UTF8/"/>
    
      <category term="Unicode" scheme="https://bearzpy.github.io/tags/Unicode/"/>
    
      <category term="GBK" scheme="https://bearzpy.github.io/tags/GBK/"/>
    
  </entry>
  
  <entry>
    <title>Android ZXing 条码扫描</title>
    <link href="https://bearzpy.github.io/2017/08/14/Android/Android%20ZXing%20%E6%9D%A1%E7%A0%81%E6%89%AB%E6%8F%8F/"/>
    <id>https://bearzpy.github.io/2017/08/14/Android/Android ZXing 条码扫描/</id>
    <published>2017-08-14T09:08:43.000Z</published>
    <updated>2018-03-28T08:26:59.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-ZXing-条码扫描"><a href="#Android-ZXing-条码扫描" class="headerlink" title="Android ZXing 条码扫描"></a>Android ZXing 条码扫描</h1><p>Android 应用经常会遇到扫码的需求，目前使用的库主要是 ZXing 和 Zbar，本文主要讲述的是 ZXing 的使用。ZXing 官方例子是非常庞大的，考虑的方面也比较全，初学者理解上会有一定的困难，本文主要是帮助初学者理解 ZXing 库的使用。</p>
<h2 id="确定扫码功能的核心"><a href="#确定扫码功能的核心" class="headerlink" title="确定扫码功能的核心"></a>确定扫码功能的核心</h2><p>扫码功能可以很简单的分为拍摄和解码两大部分，拍摄功能很容易理解，就是拍摄一帧包含二维码的图像，而解码又分两部分，即对一帧图像里面条码的定位，以及对条码内容的解析。ZXing 已经帮我们完成了解码的两个部分，这是扫码功能的核心。而拍摄的功能可以由我们自行定制，我们需要做的只是提供一帧帧图像给 ZXing 的解码器。</p>
<h2 id="拍摄功能"><a href="#拍摄功能" class="headerlink" title="拍摄功能"></a>拍摄功能</h2><p>Android 实现拍摄涉及到两个组件（Camera，和 View），其中最核心的是 Camera 的配置，View 主要负责显示拍摄的内容（在前置扫码需求下，View 甚至是可以不可见的），这部分都不涉及到 ZXing 的使用，这里只讲解最基本的的功能实现，取景框等放到最后理解。</p>
<h3 id="Camera-的基本参数配置"><a href="#Camera-的基本参数配置" class="headerlink" title="Camera 的基本参数配置"></a>Camera 的基本参数配置</h3><ul>
<li>选择使用的摄像头</li>
<li>设置拍摄图像的显示组件（SurfaceHolder）</li>
<li>选择对焦的模式</li>
<li>确定预览图像的大小（eg：1280*720）</li>
<li>设置摄像头的预览方向（成像方向）</li>
<li>设置单次预览图像的回调</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>SurfaceHolder holder<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> mCamera <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mCamera <span class="token operator">=</span> Camera<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            mCamera<span class="token punctuation">.</span><span class="token function">setPreviewDisplay</span><span class="token punctuation">(</span> holder <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mCamera<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mCamera <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCamera <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span><span class="token string">"surfaceChanged: mCamera == null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                callback<span class="token punctuation">.</span><span class="token function">onCameraOpenFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        mCameraParameters <span class="token operator">=</span> mCamera<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCameraParameters<span class="token punctuation">.</span><span class="token function">setFocusMode</span><span class="token punctuation">(</span> Camera<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span>FOCUS_MODE_AUTO <span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCameraParameters<span class="token punctuation">.</span><span class="token function">setPreviewSize</span><span class="token punctuation">(</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token number">720</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        cameraResolution<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1280</span><span class="token punctuation">;</span>
        cameraResolution<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">;</span>
        mCamera<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span> mCameraParameters <span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCamera<span class="token punctuation">.</span><span class="token function">setDisplayOrientation</span><span class="token punctuation">(</span> <span class="token number">90</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCamera<span class="token punctuation">.</span><span class="token function">startPreview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCamera<span class="token punctuation">.</span><span class="token function">cancelAutoFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCamera<span class="token punctuation">.</span><span class="token function">setAutoFocusMoveCallback</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">AutoFocusMoveCallbackImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        previewCallbackImp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreviewCallbackImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Camera 返回一帧的预览图像，在此回调中，进行图像解码</span>
        mCamera<span class="token punctuation">.</span><span class="token function">setOneShotPreviewCallback</span><span class="token punctuation">(</span>previewCallbackImp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mCamera <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mCamera<span class="token punctuation">.</span><span class="token function">stopPreview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCamera<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCamera <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="View-的参数配置"><a href="#View-的参数配置" class="headerlink" title="View 的参数配置"></a>View 的参数配置</h3><p>显示拍摄内容需要使用控件 SurfaceView，这个控件需要通过 SurfaceHolder 来与摄像头连接起来。当需要拍摄时创建 SurfaceView，此时 SurfaceHolder 需要打开摄像头进行拍摄。当拍摄结束时销毁 SurfaceView，，此时 SurfaceHolder 关闭摄像头预览并释放资源。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建 SurfaceView 后添加 SurfaceHolder 以显示拍摄内容</span>
surfaceView<span class="token punctuation">.</span><span class="token function">getHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SurfaceHolderCallbackImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 随着 SurfaceView 的生命周期控制摄像头资源的使用和释放</span>
<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SurfaceHolderCallbackImp</span> <span class="token keyword">implements</span> <span class="token class-name">SurfaceHolder<span class="token punctuation">.</span>Callback</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">surfaceCreated</span><span class="token punctuation">(</span>SurfaceHolder holder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">surfaceChanged</span><span class="token punctuation">(</span>SurfaceHolder holder<span class="token punctuation">,</span> <span class="token keyword">int</span> format<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CameraManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">surfaceDestroyed</span><span class="token punctuation">(</span>SurfaceHolder holder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CameraManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="解码功能"><a href="#解码功能" class="headerlink" title="解码功能"></a>解码功能</h2><p>解码功能就完全是 ZXing 库提供的了，我们需要按照我们自己的需求初始化 ZXing 的解码器，并将图像数据以正确的格式传给解码器。</p>
<h3 id="ZXing-解码器配置"><a href="#ZXing-解码器配置" class="headerlink" title="ZXing 解码器配置"></a>ZXing 解码器配置</h3><ul>
<li>配置解码的格式（只针对需要的格式解码可以提高速度）</li>
<li>设置特征点回调（特征点可以选择是否需要现在图像上）</li>
<li>配置字符集，配置解码精度等等（可选）</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 多格式解码器，如果只处理一种格式完全可以使用对应的解码器，以提高速度</span>
<span class="token keyword">private</span> MultiFormatReader qrcodeReader <span class="token operator">=</span> null<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initQRCodeReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Vector<span class="token operator">&lt;</span>BarcodeFormat<span class="token operator">></span> decodeFormats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    decodeFormats<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>BarcodeFormat<span class="token punctuation">.</span>QR_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    decodeFormats<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>BarcodeFormat<span class="token punctuation">.</span>DATA_MATRIX<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Hashtable<span class="token operator">&lt;</span>DecodeHintType<span class="token punctuation">,</span> Object<span class="token operator">></span> hints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span> DecodeHintType<span class="token punctuation">.</span>POSSIBLE_FORMATS<span class="token punctuation">,</span> decodeFormats <span class="token punctuation">)</span><span class="token punctuation">;</span>
    hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span> DecodeHintType<span class="token punctuation">.</span>NEED_RESULT_POINT_CALLBACK<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ResultPointCallbackImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    qrcodeReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiFormatReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    qrcodeReader<span class="token punctuation">.</span><span class="token function">setHints</span><span class="token punctuation">(</span> hints <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="拍摄图像处理"><a href="#拍摄图像处理" class="headerlink" title="拍摄图像处理"></a>拍摄图像处理</h3><p>拍摄完成的图像并不是可以直接送给解码器的，我们要对其进行提取亮度，二值化操作才行。在处理的过程中，我们可以对图像进行裁剪，配合裁剪可以实现取景框的功能。Android 相机预览默认格式是 yuv420sp，编码成 YUV 的所有像素格式里，yuv420sp 占用的空间是最小的。我们通过 PlanarYUVLuminanceSource 来提取亮度。提取亮度之后需要进行二值化操作，此处常见的二值化方法有两种，分别是 HybridBinarizer 和 GlobalHistogramBinarizer。其中 HybridBinarizer 继承自 GlobalHistogramBinarizer，识别精度要比 GlobalHistogramBinarizer 好，但是速度比其低。实际使用中应该根据具体需求去选择。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePreviewFrame</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token punctuation">,</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 提取亮度，此处可选择是否做裁剪</span>
    PlanarYUVLuminanceSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlanarYUVLuminanceSource</span><span class="token punctuation">(</span> data<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span>
            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 配置二值化算法</span>
    BinaryBitmap bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryBitmap</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">HybridBinarizer</span><span class="token punctuation">(</span> source <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//BinaryBitmap bitmap = new BinaryBitmap( new GlobalHistogramBinarizer( source ) );</span>

    <span class="token comment" spellcheck="true">// 解码</span>
    Result result <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> qrcodeReader <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> qrcodeReader<span class="token punctuation">.</span><span class="token function">decodeWithState</span><span class="token punctuation">(</span> bitmap <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//LogError( "NotFoundException: " + e );</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            qrcodeReader<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 扫描完成解码成功</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> scannerCallback <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scannerCallback<span class="token punctuation">.</span><span class="token function">onScanSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="ZXing-官方例子补充"><a href="#ZXing-官方例子补充" class="headerlink" title="ZXing 官方例子补充"></a>ZXing 官方例子补充</h2><p>ZXing 的官方库中考虑了很多内容，所以在上述基本功能上添加了如下内容，只要先理解了核心功能，这些拓展功能的理解就相对容易多了。</p>
<pre><code>* 长时间无活动自动销毁机制，避免耗电 InactivityTimer
* 扫描完成蜂鸣器提醒机制 BeepManager
* 设置取景框，裁剪无用区域 ViewfinderView
* 首次使用确定最佳的聚焦模式并保存
* 首次使用计算最佳摄像头预览大小并保存
* 扫描发现的特征点显示在屏幕上
* 从相册中获取图片扫码（RGB格式）
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-ZXing-条码扫描&quot;&gt;&lt;a href=&quot;#Android-ZXing-条码扫描&quot; class=&quot;headerlink&quot; title=&quot;Android ZXing 条码扫描&quot;&gt;&lt;/a&gt;Android ZXing 条码扫描&lt;/h1&gt;&lt;p&gt;Androi
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="ZXing" scheme="https://bearzpy.github.io/tags/ZXing/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 混淆 APK 配置</title>
    <link href="https://bearzpy.github.io/2017/07/13/gradle/Gradle%20%E6%B7%B7%E6%B7%86%20APK%20%E9%85%8D%E7%BD%AE/"/>
    <id>https://bearzpy.github.io/2017/07/13/gradle/Gradle 混淆 APK 配置/</id>
    <published>2017-07-13T10:14:43.000Z</published>
    <updated>2017-10-17T08:10:09.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle-混淆-APK-配置"><a href="#Gradle-混淆-APK-配置" class="headerlink" title="Gradle 混淆 APK 配置"></a>Gradle 混淆 APK 配置</h1><p>Gradle 混淆 APK 很简单在 build.gradle 中设置 minifyEnabled 为 true 即可开启对对应版本混淆，Gradle 会在 build.gradle 同级目录下去寻找 proguard-rules.pro 文件，如没有该文件则会自动使用 Android Studio SDK tools 路径下 proguard 里带有的 proguard-android.txt 文件。SDK 中还带有更强力的混淆文件 proguard-android-optimize.txt，一般不需要用到。正常情况下混淆文件都是基于 proguard-android.txt 修改的，混淆程度太高可能会造成 apk 运行不正常。</p>
<h2 id="开启混淆"><a href="#开启混淆" class="headerlink" title="开启混淆"></a>开启混淆</h2><pre class=" language-java"><code class="language-java">    buildTypes <span class="token punctuation">{</span>
        release <span class="token punctuation">{</span>
            minifyEnabled <span class="token boolean">true</span>
            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h2 id="混淆文件配置"><a href="#混淆文件配置" class="headerlink" title="混淆文件配置"></a>混淆文件配置</h2><p>提供一个常规的混淆文件，适合大部分的情况中使用。</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 混淆规则 proguard-rules.pro</span>

<span class="token comment" spellcheck="true"># 指定代码的压缩级别 0 - 7，一般都是5</span>
<span class="token operator">-</span>optimizationpasses <span class="token number">5</span>

<span class="token comment" spellcheck="true"># 指定混淆时的算法，后面的参数是一个过滤器</span>
<span class="token operator">-</span>optimizations !code<span class="token operator">/</span>simplification<span class="token operator">/</span>arithmetic<span class="token punctuation">,</span>!field<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">,</span>!<span class="token keyword">class</span><span class="token operator">/</span>merging<span class="token operator">/</span><span class="token operator">*</span>

<span class="token comment" spellcheck="true"># 混淆时记录日志（混淆后生产映射文件 map 类名 -> 转化后类名的映射</span>
<span class="token operator">-</span>verbose

<span class="token comment" spellcheck="true"># 不使用大小写混合，混淆后类名称为小写</span>
<span class="token operator">-</span>dontusemixedcaseclassnames

<span class="token comment" spellcheck="true"># 不跳过非公共的库的类成员</span>
<span class="token operator">-</span>dontskipnonpubliclibraryclassmembers

<span class="token comment" spellcheck="true"># 如果应用程序引入的有jar包，并且混淆jar包里面的class</span>
<span class="token operator">-</span>dontskipnonpubliclibraryclasses

<span class="token comment" spellcheck="true"># 不做预校验，preverify是proguard的4个功能之一，android不需要preverify，去掉这一步加快混淆速度</span>
<span class="token operator">-</span>dontpreverify

<span class="token comment" spellcheck="true">#优化时允许访问并修改有修饰符的类和类的成员</span>
<span class="token operator">-</span>allowaccessmodification

<span class="token comment" spellcheck="true"># 指定映射文件的名称</span>
<span class="token comment" spellcheck="true">#-printmapping proguardMapping.txt</span>

<span class="token comment" spellcheck="true"># 把混淆类中的方法名也混淆</span>
<span class="token operator">-</span>useuniqueclassmembernames

<span class="token comment" spellcheck="true"># 将文件来源重命名为“SourceFile”字符串</span>
<span class="token operator">-</span>renamesourcefileattribute SourceFile

<span class="token comment" spellcheck="true"># 保留行号</span>
<span class="token operator">-</span>keepattributes SourceFile<span class="token punctuation">,</span>LineNumberTable

<span class="token comment" spellcheck="true"># 保持所有实现 Serializable 接口的类成员</span>
<span class="token operator">-</span>keepclassmembers <span class="token keyword">class</span> <span class="token operator">*</span> implements java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>
    static final long serialVersionUID<span class="token punctuation">;</span>
    private static final java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamField<span class="token punctuation">[</span><span class="token punctuation">]</span> serialPersistentFields<span class="token punctuation">;</span>
    private void writeObject<span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    private void readObject<span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object writeReplace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object readResolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># Fragment 不需要在 AndroidManifest.xml 中注册，需要额外保护下</span>
<span class="token operator">-</span>keep public <span class="token keyword">class</span> <span class="token operator">*</span> extends android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Fragment
<span class="token operator">-</span>keep public <span class="token keyword">class</span> <span class="token operator">*</span> extends android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Fragment

<span class="token comment" spellcheck="true"># 保持测试相关的代码</span>
<span class="token operator">-</span>dontnote junit<span class="token punctuation">.</span>framework<span class="token punctuation">.</span><span class="token operator">**</span>
<span class="token operator">-</span>dontnote junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span><span class="token operator">**</span>
<span class="token operator">-</span>dontwarn android<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token operator">**</span>
<span class="token operator">-</span>dontwarn android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token operator">**</span>
<span class="token operator">-</span>dontwarn org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token operator">**</span>

<span class="token comment" spellcheck="true"># 类型转换错误，添加如下代码以便过滤泛型（不写可能会出现类型转换错误）,即避免泛型被混淆</span>
<span class="token operator">-</span>keepattributes Signature  

<span class="token comment" spellcheck="true"># 假如项目中有用到注解，应加入这行配置,对 JSON 实体映射也很重要, eg : fastjson</span>
<span class="token operator">-</span>keepattributes <span class="token operator">*</span>Annotation<span class="token operator">*</span>  

<span class="token comment" spellcheck="true"># 抛出异常时保留代码行数</span>
<span class="token operator">-</span>keepattributes SourceFile<span class="token punctuation">,</span>LineNumberTable  

<span class="token comment" spellcheck="true"># 不混淆去除 AIDL</span>
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token operator">*</span> implements android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface <span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># 不混淆输入的类文件</span>
<span class="token comment" spellcheck="true">#-dontobfuscate</span>

<span class="token comment" spellcheck="true"># 不优化输入的类文件，优化可能会造成一些潜在风险，不能保证在所有版本的Dalvik上都正常运行</span>
<span class="token operator">-</span>dontoptimize

<span class="token comment" spellcheck="true">#不混淆任何包含native方法的类的类名以及native方法名。</span>
<span class="token operator">-</span>keepclasseswithmembernames <span class="token keyword">class</span> <span class="token operator">*</span> <span class="token punctuation">{</span>
    native <span class="token operator">&lt;</span>methods<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">#不混淆任何一个 View 中的 setXxx() 和  getXxx()方法，因为属性动画需要有相应的 setter 和 getter 的方法实现，混淆了就无法工作了</span>
<span class="token operator">-</span>keepclassmembers public <span class="token keyword">class</span> <span class="token operator">*</span> extends android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View <span class="token punctuation">{</span>
   void set<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">**</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token operator">**</span><span class="token operator">*</span> get<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">#不混淆枚举中的 values() 和 valueOf() 方法</span>
<span class="token operator">-</span>keepclassmembers enum <span class="token operator">*</span> <span class="token punctuation">{</span>
    public static <span class="token operator">**</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    public static <span class="token operator">**</span> valueOf<span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">#不混淆 Parcelable 实现类中的 CREATOR 字段，CREATOR 字段是绝对不能改变的，包括大小写都不能变，不然整个 Parcelable 工作机制都会失败</span>
<span class="token operator">-</span>keepclassmembers <span class="token keyword">class</span> <span class="token operator">*</span> implements android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcelable <span class="token punctuation">{</span>
  public static final android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcelable$Creator CREATOR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># 对 android.support 包下的代码不警告</span>
<span class="token comment" spellcheck="true"># 因为 support 包中有很多代码都是在高版本中使用的，如果我们的项目指定的版本比较低在打包时就会给予警告。</span>
<span class="token comment" spellcheck="true"># 不过 support 包中所有的代码都在版本兼容性上做足了判断，因此不用担心代码会出问题，所以直接忽略警告就可以了。</span>
<span class="token operator">-</span>dontwarn android<span class="token punctuation">.</span>support<span class="token punctuation">.</span><span class="token operator">**</span>
</code></pre>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gradle-混淆-APK-配置&quot;&gt;&lt;a href=&quot;#Gradle-混淆-APK-配置&quot; class=&quot;headerlink&quot; title=&quot;Gradle 混淆 APK 配置&quot;&gt;&lt;/a&gt;Gradle 混淆 APK 配置&lt;/h1&gt;&lt;p&gt;Gradle 混淆 APK 
    
    </summary>
    
      <category term="Gradle" scheme="https://bearzpy.github.io/categories/Gradle/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="Gradle" scheme="https://bearzpy.github.io/tags/Gradle/"/>
    
      <category term="Android Studio" scheme="https://bearzpy.github.io/tags/Android-Studio/"/>
    
      <category term="Jar" scheme="https://bearzpy.github.io/tags/Jar/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 生成 Jar 包</title>
    <link href="https://bearzpy.github.io/2017/06/23/gradle/Gradle%20%E7%94%9F%E6%88%90%20Jar%20%E5%8C%85/"/>
    <id>https://bearzpy.github.io/2017/06/23/gradle/Gradle 生成 Jar 包/</id>
    <published>2017-06-23T08:04:43.000Z</published>
    <updated>2017-10-17T07:33:15.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle-生成-Jar-包"><a href="#Gradle-生成-Jar-包" class="headerlink" title="Gradle 生成 Jar 包"></a>Gradle 生成 Jar 包</h1><p>网上找到的在 Android Studio 里生成 jar 包的帖子，基本都是生成 aar，或者是使用第三方库，并不符和需求。项目中 Service 使用 AIDL，AIDL 的版本很难管理，所以需要把编译 AIDL 所生成的 class 文件打包成 jar 包，方便客户端使用和版本管理。</p>
<h2 id="需要打包的-class-目录"><a href="#需要打包的-class-目录" class="headerlink" title="需要打包的 class 目录"></a>需要打包的 class 目录</h2><p>Android Studio 编译生成的 class 是在对应的 Module 目录下的。  </p>
<p>PATH: {Module}/build/intermediates/classes/{ProductFlavors}/{BuildType}/{PackageName}/</p>
<ul>
<li>Module: 模块名称。</li>
<li>ProductFlavors: 产品风味，如果没定义这个量就没有这层目录。</li>
<li>BuildType: 构建类型。</li>
<li>PackageName: 需要打包的 class 的包名。</li>
</ul>
<p>Build Type + Product Flavor = Build Variant</p>
<h2 id="生成-Jar-包的目录"><a href="#生成-Jar-包的目录" class="headerlink" title="生成 Jar 包的目录"></a>生成 Jar 包的目录</h2><p>Gradle 打出的 Jar 包默认存放在对应的 {Module}/build/libs 文件夹下。</p>
<h2 id="删除生成的-Jar-包"><a href="#删除生成的-Jar-包" class="headerlink" title="删除生成的 Jar 包"></a>删除生成的 Jar 包</h2><p>Gradle 生成 Jar 包的同时可以对 Jar 包进行命名，在命名上有版本号的区分，比如生成的 Jar 包名字为 mJar-V0.0.1.jar。在删除旧的 Jar 包的时候如果版本号变了，以文件名查找删除可能就找不到该文件，所以可以选择将整个 libs 文件夹删除。</p>
<p>任务 clearLibsDir 用来清理生成 Jar 包。</p>
<pre class=" language-java"><code class="language-java">task <span class="token function">clearLibsDir</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Delete<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    delete <span class="token string">'build/libs'</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="对生成的-class-打包"><a href="#对生成的-class-打包" class="headerlink" title="对生成的 class 打包"></a>对生成的 class 打包</h2><p>在 {Module} 文件夹下的 build.gradle 中添加 clearLibsDir 任务和 makeJar 任务，同步后执行 makeJar 任务就能生成需要的 Jar 包，makeJar 任务依赖于 clearLibsDir 任务，所以每次生成 Jar 包的时候都会把先清除旧的 Jar 包。</p>
<pre class=" language-java"><code class="language-java">task <span class="token function">makeJar</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Jar<span class="token punctuation">,</span> dependsOn<span class="token operator">:</span> clearLibsDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// 指定生成的 jar 包名字</span>
    baseName <span class="token string">"mJar-V0.0.1"</span>
    <span class="token comment" spellcheck="true">// 设定需要打包的 class 文件路径</span>
    <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'build/intermediates/classes/debug/'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 排除 debug 目录下的 android 文件夹</span>
    <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token string">'android/'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 排除 com 目录下的 test 目录下的 ui 文件夹</span>
    <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token string">'com/test/ui'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//去掉 R$ 开头的文件</span>
    exclude <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'R$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 指定打包后的目录结构</span>
    <span class="token function">into</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>注： into 处需要保持 ‘/‘ 目录结构，指定目录结构可能会造成 Manifest.MF 重复问题。打包时 Manifest.MF 文件会放在 into 中的一级目录下，若指定其他目录结构，Manifest.MF 在其他包名下会被当作资源文件，当项目中存在多个 jar 包有可能造成多个 Manifest.MF 被认为是资源文件且路径相同的错误。</p>
<h2 id="拷贝生成的-Jar-包到指定的目录中"><a href="#拷贝生成的-Jar-包到指定的目录中" class="headerlink" title="拷贝生成的 Jar 包到指定的目录中"></a>拷贝生成的 Jar 包到指定的目录中</h2><p>编写 copy 任务，把生成的 jar 包从生成目录拷贝到指定目录中，这里的路径可以是相对路径。</p>
<pre class=" language-java"><code class="language-java">task <span class="token function">copyJarTask</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Copy<span class="token punctuation">,</span> dependsOn<span class="token operator">:</span> makeJar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    from <span class="token string">'build/libs'</span>
    into <span class="token string">'build/../libs'</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gradle-生成-Jar-包&quot;&gt;&lt;a href=&quot;#Gradle-生成-Jar-包&quot; class=&quot;headerlink&quot; title=&quot;Gradle 生成 Jar 包&quot;&gt;&lt;/a&gt;Gradle 生成 Jar 包&lt;/h1&gt;&lt;p&gt;网上找到的在 Android Stu
    
    </summary>
    
      <category term="Gradle" scheme="https://bearzpy.github.io/categories/Gradle/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="Gradle" scheme="https://bearzpy.github.io/tags/Gradle/"/>
    
      <category term="Android Studio" scheme="https://bearzpy.github.io/tags/Android-Studio/"/>
    
      <category term="Jar" scheme="https://bearzpy.github.io/tags/Jar/"/>
    
  </entry>
  
  <entry>
    <title>ADB 常用指令</title>
    <link href="https://bearzpy.github.io/2017/06/22/Android/ADB%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>https://bearzpy.github.io/2017/06/22/Android/ADB 常用指令/</id>
    <published>2017-06-22T03:01:27.000Z</published>
    <updated>2017-11-02T06:15:15.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ADB-常用指令"><a href="#ADB-常用指令" class="headerlink" title="ADB 常用指令"></a>ADB 常用指令</h1><ol>
<li><p>显示连接到计算机的设备</p>
<p> <code>adb devices</code></p>
</li>
<li><p>多设备连接时指定操作设备</p>
<p> <code>adb -s &quot;设备SN&quot; &quot;Cmd&quot;</code></p>
</li>
<li><p>安装 APK</p>
<p> <code>adb install -r test.apk</code></p>
</li>
<li><p>卸载 APK</p>
<p> <code>adb uninstall com.example.android.background</code></p>
</li>
<li><p>PC 传文件到 Android</p>
<p> <code>adb push ./thing.zip /storage/sdcard0/</code></p>
</li>
<li><p>PC 获取 Android 文件</p>
<p> <code>adb pull /storage/sdcard0/thing.zip ./</code></p>
</li>
<li><p>启动指定 App 的指定 Activity</p>
<p> <code>adb shell am start -n com.android.settings/com.android.settings.Settings</code>、</p>
</li>
<li><p>关闭指定 App</p>
<p> <code>adb shell am force-stop com.android.settings</code></p>
</li>
<li><p>清除指定 App 数据</p>
<p> <code>adb shell pm clear com.example.android.background</code></p>
</li>
<li><p>查看第三方应用</p>
<p> <code>adb shell pm list packages -3</code></p>
</li>
<li><p>手机电量</p>
<p> <code>adb shell dumpsys battery set level 100</code></p>
</li>
<li><p>模拟手机从 USB 充电器上拔掉 Android 6.0 以上</p>
<p> <code>adb shell dumpsys battery unplug</code></p>
</li>
<li><p>重新插入手机 Android 6.0 以上</p>
<p> <code>adb shell dumpsys battery reset</code></p>
</li>
<li><p>切换系统为非充电状态</p>
<p> <code>adb shell dumpsys battery set status 1</code></p>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ADB-常用指令&quot;&gt;&lt;a href=&quot;#ADB-常用指令&quot; class=&quot;headerlink&quot; title=&quot;ADB 常用指令&quot;&gt;&lt;/a&gt;ADB 常用指令&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;显示连接到计算机的设备&lt;/p&gt;
&lt;p&gt; &lt;code&gt;adb devices
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="ADB" scheme="https://bearzpy.github.io/tags/ADB/"/>
    
  </entry>
  
  <entry>
    <title>常用 git 指令</title>
    <link href="https://bearzpy.github.io/2017/06/22/git/%E5%B8%B8%E7%94%A8%20git%20%E6%8C%87%E4%BB%A4/"/>
    <id>https://bearzpy.github.io/2017/06/22/git/常用 git 指令/</id>
    <published>2017-06-22T02:55:02.000Z</published>
    <updated>2018-03-26T02:33:58.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用-git-指令"><a href="#常用-git-指令" class="headerlink" title="常用 git 指令"></a>常用 git 指令</h1><h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><ul>
<li>git config –global user.name “xxx”</li>
<li>git config –global user.email “xxx@xxx.com”</li>
</ul>
<h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><ul>
<li>git init</li>
</ul>
<h2 id="建立空仓库"><a href="#建立空仓库" class="headerlink" title="建立空仓库"></a>建立空仓库</h2><ul>
<li>git –bare init</li>
</ul>
<h2 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h2><ul>
<li>git log</li>
</ul>
<h2 id="git-清理工程命令"><a href="#git-清理工程命令" class="headerlink" title="git 清理工程命令"></a>git 清理工程命令</h2><ul>
<li>git clean -nxfd 预览需要删除的文件</li>
<li>git clean -xfd  删除的文件</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用-git-指令&quot;&gt;&lt;a href=&quot;#常用-git-指令&quot; class=&quot;headerlink&quot; title=&quot;常用 git 指令&quot;&gt;&lt;/a&gt;常用 git 指令&lt;/h1&gt;&lt;h2 id=&quot;配置用户信息&quot;&gt;&lt;a href=&quot;#配置用户信息&quot; class=&quot;head
    
    </summary>
    
      <category term="git" scheme="https://bearzpy.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://bearzpy.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Android Firebase AdMob 横幅广告</title>
    <link href="https://bearzpy.github.io/2017/05/31/Android/Firebase%20AdMob%20%E6%A8%AA%E5%B9%85%E5%B9%BF%E5%91%8A/"/>
    <id>https://bearzpy.github.io/2017/05/31/Android/Firebase AdMob 横幅广告/</id>
    <published>2017-05-31T06:56:42.000Z</published>
    <updated>2018-03-01T01:46:09.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase"></a>Firebase</h1><p>Firebase 是一个用于开发移动应用和 Web 应用的开发平台，自从被 Google 收购后融合了 Google 的云服务。Firebase 的初始产品是一个实时数据库，它提供了一个 API，允许开发人员在多个客户端之间存储和同步数据。随着时间的推移，它已经扩大了产品线，成为一个完整的应用程序开发套件。</p>
<h2 id="AdMob"><a href="#AdMob" class="headerlink" title="AdMob"></a>AdMob</h2><p>AdMob 覆盖 200 多个国家，是美国最大的移动广告平台。开发者可以直接使用 AdMob SDK 展示广告来获得收益，而无需与广告投放者沟通。</p>
<h2 id="接入-AdMob-SDK"><a href="#接入-AdMob-SDK" class="headerlink" title="接入 AdMob SDK"></a>接入 AdMob SDK</h2><p>这里主要介绍如何使用横幅式广告。横幅广告：基本广告格式，在设备屏幕的顶部和底部展示。  </p>
<p>使用 AdMob SDK 主要有 4 个步骤：</p>
<ul>
<li>在 build.gradle 中添加依赖。</li>
<li>在 manifest 中声明权限。</li>
<li>在 layout 文件中添加布局。</li>
<li>在 activity 代码中添加加载代码。</li>
</ul>
<p>横幅式广告效果：<br><img src="https://raw.githubusercontent.com/BearZPY/blog-img-repository/master/google_study_jams/L4/admob_banner.png" alt="横幅式广告"></p>
<h3 id="在-build-gradle-中添加依赖"><a href="#在-build-gradle-中添加依赖" class="headerlink" title="在 build.gradle 中添加依赖"></a>在 build.gradle 中添加依赖</h3><p>修改 Project 目录下的 build.gradle，在 buildscript 闭包里的 dependencies 闭包中增加 com.google.gms:google-services 的插件。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span>

buildscript <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    dependencies <span class="token punctuation">{</span>
        classpath <span class="token string">'com.android.tools.build:gradle:2.3.2'</span>
        classpath <span class="token string">'com.google.gms:google-services:3.0.0'</span>

        <span class="token comment" spellcheck="true">// NOTE: Do not place your application dependencies here; they belong</span>
        <span class="token comment" spellcheck="true">// in the individual module build.gradle files</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

allprojects <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

task <span class="token function">clean</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Delete<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    delete rootProject<span class="token punctuation">.</span>buildDir
<span class="token punctuation">}</span>
</code></pre>
<p>修改 Module 目录下的 build.gradle，声明 google-services 插件，并在 dependencies 闭包中增加 firebase-core 和 firebase-ads。</p>
<pre class=" language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'com.android.application'</span>
apply plugin<span class="token operator">:</span> <span class="token string">'com.google.gms.google-services'</span>

android <span class="token punctuation">{</span>
    compileSdkVersion <span class="token number">25</span>
    buildToolsVersion <span class="token string">"25.0.2"</span>
    defaultConfig <span class="token punctuation">{</span>
        minSdkVersion <span class="token number">15</span>
        targetSdkVersion <span class="token number">25</span>
    <span class="token punctuation">}</span>
    buildTypes <span class="token punctuation">{</span>
        release <span class="token punctuation">{</span>
            minifyEnabled <span class="token boolean">false</span>
            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    compile <span class="token string">'com.android.support:appcompat-v7:25.3.1'</span>
    compile <span class="token string">'com.google.firebase:firebase-core:10.2.1'</span>
    compile <span class="token string">'com.google.firebase:firebase-ads:10.2.1'</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="在-manifest-中声明权限"><a href="#在-manifest-中声明权限" class="headerlink" title="在 manifest 中声明权限"></a>在 manifest 中声明权限</h3><p>使用 AdMob 的应用本身需要有访问网络的权限，所以需要在 manifest 中声明如下权限。</p>
<pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span><span class="token operator">/</span><span class="token operator">></span>
</code></pre>
<h3 id="在-layout-文件中添加布局"><a href="#在-layout-文件中添加布局" class="headerlink" title="在 layout 文件中添加布局"></a>在 layout 文件中添加布局</h3><p>横幅式广告只需要在布局文件中添加一个 AdView 就可以了，其中使用了 ads，需要声明命名空间，在根布局中添加 <code>xmlns:ads=&quot;http://schemas.android.com/apk/res-auto&quot;</code>。在 AdView 中，系统要求提供 layout_width 和 layout_height，可以将这两项都设置为 wrap_content。  </p>
<p>ads 参数意义：  </p>
<ul>
<li>adSize=”BANNER” 设置为横幅式广告。  </li>
<li>adUnitId 该参数是在请求广告时 AdView 使用的广告单元 ID，是用来和你的账户绑定的，下文会讲述如何获得该 ID。</li>
</ul>
<p>AdView 布局：</p>
<pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>android<span class="token punctuation">.</span>gms<span class="token punctuation">.</span>ads<span class="token punctuation">.</span>AdView
        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/adView"</span>
        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>
        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>
        android<span class="token operator">:</span>layout_centerHorizontal<span class="token operator">=</span><span class="token string">"true"</span>
        android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>
        ads<span class="token operator">:</span>adSize<span class="token operator">=</span><span class="token string">"BANNER"</span>
        ads<span class="token operator">:</span>adUnitId<span class="token operator">=</span><span class="token string">"@string/banner_ad_unit_id"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>android<span class="token punctuation">.</span>gms<span class="token punctuation">.</span>ads<span class="token punctuation">.</span>AdView<span class="token operator">></span>
</code></pre>
<h3 id="在-activity-代码中添加加载代码"><a href="#在-activity-代码中添加加载代码" class="headerlink" title="在 activity 代码中添加加载代码"></a>在 activity 代码中添加加载代码</h3><ul>
<li>定义全局变量 <code>private AdView mAdView;</code></li>
<li>在 OnCreate 中添加如下代码就能完成广告的加载。</li>
</ul>
<pre class=" language-java"><code class="language-java">    mAdView <span class="token operator">=</span> <span class="token punctuation">(</span>AdView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>adView<span class="token punctuation">)</span><span class="token punctuation">;</span>
    AdRequest adRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mAdView<span class="token punctuation">.</span><span class="token function">loadAd</span><span class="token punctuation">(</span>adRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="广告单元-ID"><a href="#广告单元-ID" class="headerlink" title="广告单元 ID"></a>广告单元 ID</h2><p>广告单元 ID 是在应用中占有位置的唯一标识符，用于显示广告。如果应用具有两个 Activity（例如，分别显示一个横幅），则需要提供两个广告单元，每个广告单元均具有自己的 ID。AdMob 广告单元 ID 的格式为 ca-app-pub-XXXXXXXXXXXXXXXX/NNNNNNNNNN</p>
<p>若要使新应用显示广告，则需包括一个广告单元 ID。使用应用字符串资源文件（在 app/src/main/res/values/strings.xml 中）。</p>
<h3 id="测试广告单元-ID"><a href="#测试广告单元-ID" class="headerlink" title="测试广告单元 ID"></a>测试广告单元 ID</h3><p><code>&lt;string name=&quot;banner_ad_unit_id&quot;&gt;ca-app-pub-3940256099942544/6300978111&lt;/string&gt;</code></p>
<p>注意，以上提供的广告单元 ID 仅供测试使用。它允许应用检索示例横幅广告并确保实现正确无误。在开发和测试应用时，应始终使用测试广告。 点击自己的实时广告违反 AdMob 政策。在开发和测试期间，请使用测试广告。如果确实需要在发布前呈现直播广告，请避免点击它们。如果点击直播广告，AdMob 帐户可能被禁用。</p>
<h3 id="创建自己的广告单元-ID"><a href="#创建自己的广告单元-ID" class="headerlink" title="创建自己的广告单元 ID"></a>创建自己的广告单元 ID</h3><p>当前基于 AdMob 和 AdMob Beta 的版本，有两种不同的方法，具体参见<br><a href="https://support.google.com/admob/answer/7311346" target="_blank" rel="external">创建横幅广告单元</a>。</p>
<h2 id="添加广告监听器"><a href="#添加广告监听器" class="headerlink" title="添加广告监听器"></a>添加广告监听器</h2><p>你可能会发现有时候你的广告不能正常显示出来，然而根据前文的信息你无法得知具体的原因，这时候我们可为 AdView 添加 AdListener，由此来确定 AdView 的状态。例如，当广告加载失败的时候 onAdFailedToLoad(int returnCode) 函数会被调用，我们可以根据 returnCode 来确定无法显示的原因。</p>
<p>AdListener 一共有 5 个函数可以由我们去实现：</p>
<ul>
<li>onAdClosed() 用户在点击广告后即将返回应用程序时调用。</li>
<li>onAdFailedToLoad(int returnCode) 广告请求失败时调用。</li>
<li>onAdLeftApplication() 当广告离开应用程序时调用（例如，去浏览器）。</li>
<li>onAdLoaded() 从服务器获得广告后调用。</li>
<li>onAdOpened() 当广告打开，覆盖屏幕时调用。</li>
</ul>
<p>广告加载失败的 4 种常见原因：</p>
<ul>
<li>ERROR_CODE_INTERNAL_ERROR，值为0，内部错误（从广告服务器收到无效的响应）。</li>
<li>ERROR_CODE_INVALID_REQUEST，值为1，广告单元ID不正确。</li>
<li>ERROR_CODE_NETWORK_ERROR，值为2，网络连接失败。</li>
<li>ERROR_CODE_NO_FILL，值为3，广告请求已成功，但由于缺少广告资源，没有返回任何广告。</li>
</ul>
<p>使用示例：</p>
<pre class=" language-java"><code class="language-java">   mAdView <span class="token operator">=</span> <span class="token punctuation">(</span>AdView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>adView<span class="token punctuation">)</span><span class="token punctuation">;</span>
   AdRequest adRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   mAdView<span class="token punctuation">.</span><span class="token function">setAdListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AdListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token annotation punctuation">@Override</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAdClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAdClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onAdClosed: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token annotation punctuation">@Override</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAdFailedToLoad</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAdFailedToLoad</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
           String msg<span class="token punctuation">;</span>
           <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">case</span> AdRequest<span class="token punctuation">.</span>ERROR_CODE_INTERNAL_ERROR<span class="token operator">:</span>
                   msg <span class="token operator">=</span> <span class="token string">"服务器错误"</span><span class="token punctuation">;</span>
                   <span class="token keyword">break</span><span class="token punctuation">;</span>
               <span class="token keyword">case</span> AdRequest<span class="token punctuation">.</span>ERROR_CODE_INVALID_REQUEST<span class="token operator">:</span>
                   msg <span class="token operator">=</span> <span class="token string">"广告单元ID不正确"</span><span class="token punctuation">;</span>
                   <span class="token keyword">break</span><span class="token punctuation">;</span>
               <span class="token keyword">case</span> AdRequest<span class="token punctuation">.</span>ERROR_CODE_NETWORK_ERROR<span class="token operator">:</span>
                   msg <span class="token operator">=</span> <span class="token string">"网络连接失败"</span><span class="token punctuation">;</span>
                   <span class="token keyword">break</span><span class="token punctuation">;</span>
               <span class="token keyword">case</span> AdRequest<span class="token punctuation">.</span>ERROR_CODE_NO_FILL<span class="token operator">:</span>
                   msg <span class="token operator">=</span> <span class="token string">"暂无广告显示"</span><span class="token punctuation">;</span>
                   <span class="token keyword">break</span><span class="token punctuation">;</span>
               <span class="token keyword">default</span><span class="token operator">:</span>
                   msg <span class="token operator">=</span> <span class="token string">"未知错误"</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
           Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onAdFailedToLoad: msg = "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token annotation punctuation">@Override</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAdLeftApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAdLeftApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onAdLeftApplication: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token annotation punctuation">@Override</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAdOpened</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAdOpened</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onAdOpened: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token annotation punctuation">@Override</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAdLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAdLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onAdLoaded: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   mAdView<span class="token punctuation">.</span><span class="token function">loadAd</span><span class="token punctuation">(</span>adRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>有些时候广告可能显示不出来，可能是因为 GFW 导致的网络问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Firebase&quot;&gt;&lt;a href=&quot;#Firebase&quot; class=&quot;headerlink&quot; title=&quot;Firebase&quot;&gt;&lt;/a&gt;Firebase&lt;/h1&gt;&lt;p&gt;Firebase 是一个用于开发移动应用和 Web 应用的开发平台，自从被 Google 收
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="Google" scheme="https://bearzpy.github.io/tags/Google/"/>
    
      <category term="AdMob" scheme="https://bearzpy.github.io/tags/AdMob/"/>
    
      <category term="Firebase" scheme="https://bearzpy.github.io/tags/Firebase/"/>
    
  </entry>
  
  <entry>
    <title>xUtils3 的数据库使用</title>
    <link href="https://bearzpy.github.io/2017/05/06/Android/xUtils3%20%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    <id>https://bearzpy.github.io/2017/05/06/Android/xUtils3 的数据库使用/</id>
    <published>2017-05-06T10:56:42.000Z</published>
    <updated>2018-03-30T01:18:52.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xUtils3-的数据库使用"><a href="#xUtils3-的数据库使用" class="headerlink" title="xUtils3 的数据库使用"></a>xUtils3 的数据库使用</h1><p>xUtils3 是一款 Android ORM 和 IOC 快速应用开发框架，源自于 Afinal，对 Afinal 进行了大量重构，功能上也比 Afinal 更加强大。包括四个模块分别是 DbUtils，ViewUtils， HttpUtils 和 BitmapUtils 模块。项目主要使用了 DbUtils 模块实现的 ORM 框架，主要需求是将类数据整个读取或存入 SQLite 数据库中。</p>
<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>ORM 框架：  </p>
<p>ORM（Object Relational Mapping）框架采用元数据来描述对象间的关系映射细节，只要提供了持久化类与表的映射关系，ORM 框架在运行时就能参照映射文件的信息，把对象持久化到数据库中。元数据是用来描述其它数据的数据 （data about other data），或者说是用于提供某种资源的有关信息的结构数据（structured data）。</p>
<p>DbUtils模块：</p>
<ul>
<li>Android中的 ORM 框架，一行代码就可以进行增删改查；</li>
<li>支持事务，默认关闭；</li>
<li>可通过注解自定义表名，列名，外键，唯一性约束，NOT NULL约束，CHECK约束等（需要混淆的时候请注解表名和列名）；</li>
<li>支持绑定外键，保存实体时外键关联实体自动保存或更新；</li>
<li>自动加载外键关联实体，支持延时加载；</li>
<li>支持链式表达查询，更直观的查询语义</li>
</ul>
<h2 id="使用准备"><a href="#使用准备" class="headerlink" title="使用准备"></a>使用准备</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>Gradle 构建时添加如下依赖即可使用该开源库</p>
<pre class=" language-java"><code class="language-java">compile <span class="token string">'org.xutils:xutils:3.5.0'</span>
</code></pre>
<h3 id="配置相关权限"><a href="#配置相关权限" class="headerlink" title="配置相关权限"></a>配置相关权限</h3><p>使用 xUtils3 时需要在 manifest 里添加相关权限，主要是 xUtils3 的其他模块会用到。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.WRITE_EXTERNAL_STORAGE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
</code></pre>
<h3 id="初始化-xUtils3-模块"><a href="#初始化-xUtils3-模块" class="headerlink" title="初始化 xUtils3 模块"></a>初始化 xUtils3 模块</h3><p>xUtils3 需要在 Application 的 OnCreate() 方法中进行初始化，所以我们需要使用自定义一个继承 Application 的 App 类。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 初始化 xUtil3</span>
        x<span class="token punctuation">.</span>Ext<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token punctuation">.</span>Ext<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span>BuildConfig<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在 manifest 里面使用我们自己定义的 App 类，下面代码省略了其他内容。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>
    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 四大组件 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="使用-DbUtils-模块"><a href="#使用-DbUtils-模块" class="headerlink" title="使用 DbUtils 模块"></a>使用 DbUtils 模块</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul>
<li>使用注解创建数据表</li>
<li>使用 DaoConfig 进行数据库的信息配置</li>
<li>x.getDb(daoConfig) 获取数据库实例进行增删改查</li>
</ul>
<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>首先要知道是只有在你对数据库里面的操作涉及到这张表的操作时，会先判断当前的表是否存在，如果不存在，才会创建一张表，如果存在，才会进行相应的 CRUD 操作。</p>
<p>DbUtils 相关注解：</p>
<p>其中核心注解有两个，分别是 <code>@Table</code> 和 <code>@Column</code>。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Check</span>     check约束
<span class="token annotation punctuation">@Column</span>    列名
<span class="token annotation punctuation">@Finder</span>    一对多、多对一、多对多关系
<span class="token annotation punctuation">@Foreign</span>   外键
<span class="token annotation punctuation">@Id</span>        主键，当为 <span class="token keyword">int</span> 类型时，默认自增，非自增时，需要设置 id 的值
<span class="token annotation punctuation">@NoAutoIncrement</span>  不自增
<span class="token annotation punctuation">@NotNull</span>  不为空
<span class="token annotation punctuation">@Table</span>    表名
<span class="token annotation punctuation">@Transient</span>  不写入数据库表结构
<span class="token annotation punctuation">@Unique</span>     唯一约束
</code></pre>
<p><code>@Table</code>：有属性 name 和 onCreated 两个属性。name 属性决定了该实体类映射的数据库表名，而 onCreated 属性则可以用来添加表一级的属性或约束，例如创建联和唯一索引等。</p>
<p><code>@Column</code>：有 name、property、isId、autoGen 四个属性。name 属性决定了实体类属性对应的数据库字段名，property 属性可以用来添加数据库中字段一级的属性或约束条件例如 not null，索引等，isId 属性表示该字段是否是主键，默认为 false，autoGen 则表示为主键是否自增长，默认为 true，所以该字段只有在 isId 属性为 true 时有效。未加注 <code>@Column</code> 注解的字段将不映射 SQLite 字段。</p>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> isId <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"email"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"time"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Date time<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"date"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 此处省略 getter 和 setter</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="使用-DaoConfig-进行数据库的信息配置"><a href="#使用-DaoConfig-进行数据库的信息配置" class="headerlink" title="使用 DaoConfig 进行数据库的信息配置"></a>使用 DaoConfig 进行数据库的信息配置</h3><ul>
<li>设置数据库名</li>
<li>设置数据库版本</li>
<li>开启事务</li>
<li>设置数据库开启监听方法</li>
<li>设置数据库更新监听方法</li>
</ul>
<p>当数据版本变化时，DbManager.DbUpgradeListener() 会被调用，可以在其中对表结构进行修改。当数据库打开时开启 WAL, 对写入加速提升巨大。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> DbManager<span class="token punctuation">.</span>DaoConfig daoConfig<span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token function">MyDBManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    daoConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DbManager<span class="token punctuation">.</span>DaoConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDbName</span><span class="token punctuation">(</span><span class="token string">"dao.db"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDbVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setAllowTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDbOpenListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DbManager<span class="token punctuation">.</span>DbOpenListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDbOpened</span><span class="token punctuation">(</span>DbManager db<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    db<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enableWriteAheadLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDbUpgradeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DbManager<span class="token punctuation">.</span>DbUpgradeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onUpgrade</span><span class="token punctuation">(</span>DbManager db<span class="token punctuation">,</span> <span class="token keyword">int</span> oldVersion<span class="token punctuation">,</span> <span class="token keyword">int</span> newVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// db.addColumn(...);</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="数据库的增删改查"></a>数据库的增删改查</h3><p>保存类到数据库中：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 此处省略了 MyDBManager 单例模式的实现</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"12345678@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> ret <span class="token operator">=</span> MyDBManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DbManager dbManager <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getDb</span><span class="token punctuation">(</span>daoConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        dbManager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DbException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>根据列名查找匹配的第一个值，把该行数据从数据库中读取到类中：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 此处省略了 MyDBManager 单例模式的实现</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    User userFirst <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> MyDBManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">readFirst</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"xiao ming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"userFirst = "</span> <span class="token operator">+</span> userFirst<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> Object <span class="token function">readFirst</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> entityType<span class="token punctuation">,</span> String columnName<span class="token punctuation">,</span> String columnValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DbManager dbManager <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getDb</span><span class="token punctuation">(</span>daoConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        WhereBuilder builder <span class="token operator">=</span> WhereBuilder<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>columnName<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dbManager<span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span>entityType<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DbException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> null<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>根据列名查找匹配的所有值的行数，并全部删除：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 此处省略了 MyDBManager 单例模式的实现</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> MyDBManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                        <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"xiao ming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> entityType<span class="token punctuation">,</span> String columnName<span class="token punctuation">,</span> String columnValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> result<span class="token punctuation">;</span>
    DbManager dm <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getDb</span><span class="token punctuation">(</span>daoConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        WhereBuilder builder <span class="token operator">=</span> WhereBuilder<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>columnName<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dm<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>entityType<span class="token punctuation">,</span> builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DbException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>直接使用 SQL 语句：</p>
<pre class=" language-java"><code class="language-java">DbManager dm <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getDb</span><span class="token punctuation">(</span>daoConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 执行查询语句</span>
Cursor cursor<span class="token operator">=</span> dm<span class="token punctuation">.</span><span class="token function">execQuery</span><span class="token punctuation">(</span><span class="token string">"select * from user where id>=5;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 执行非查询语句</span>
dm<span class="token punctuation">.</span><span class="token function">execNonQuery</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;xUtils3-的数据库使用&quot;&gt;&lt;a href=&quot;#xUtils3-的数据库使用&quot; class=&quot;headerlink&quot; title=&quot;xUtils3 的数据库使用&quot;&gt;&lt;/a&gt;xUtils3 的数据库使用&lt;/h1&gt;&lt;p&gt;xUtils3 是一款 Android OR
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="SQL" scheme="https://bearzpy.github.io/tags/SQL/"/>
    
      <category term="xUtils3" scheme="https://bearzpy.github.io/tags/xUtils3/"/>
    
      <category term="ORM" scheme="https://bearzpy.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>自定义 View 绘制基础</title>
    <link href="https://bearzpy.github.io/2017/04/22/Android%20View/%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E7%BB%98%E5%88%B6%E5%9F%BA%E7%A1%80/"/>
    <id>https://bearzpy.github.io/2017/04/22/Android View/自定义 View 绘制基础/</id>
    <published>2017-04-22T03:01:27.000Z</published>
    <updated>2018-03-06T07:41:00.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义-View"><a href="#自定义-View" class="headerlink" title="自定义 View"></a>自定义 View</h1><p>自定义控件继承于 View，我们按自己的需要复写其构造、onMeasure、onLayout、onTouchEvent、onDraw、onAttachedToWindow、onDetachedFromWindow 等方法。其中 onMeasure、onLayout、onDraw 这三个方法是 View 的核心方法。本篇主要涉及到 onDraw() 使用的 Canvas 的 drawXXX() 系列方法及 Paint 常用方法。</p>
<h2 id="View-的构造函数"><a href="#View-的构造函数" class="headerlink" title="View 的构造函数"></a>View 的构造函数</h2><p>View 的构造函数有 4 个，一般情况下只要实现前三个。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 属性优先级：XML 定义 > XML 的 Style 定义 > defStyleAttr > defStyleRes > Theme</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// 代码中创建 View 时使用</span>
    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 从 XML 加载 View 时使用</span>
    <span class="token comment" spellcheck="true">// AttributeSet: 属性集，XML 内设置的内容</span>
    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 主题中定义 View 的样式时使用</span>
    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取自定义属性</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 当 defStyleAttr 为 0 时使用</span>
    <span class="token comment" spellcheck="true">// 最小 API 21</span>
    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="onDraw-绘制基础"><a href="#onDraw-绘制基础" class="headerlink" title="onDraw() 绘制基础"></a>onDraw() 绘制基础</h2><p>自定义绘制的方式是重写绘制方法，其中最常用的是 onDraw()。我们需要提前创建好 Paint 对象，重写 onDraw() 方法，编写具体的绘制代码。在 Android 里，每个 View 都有一个自己的坐标系，彼此之间是不影响的。这个坐标系的原点是 View 左上角的那个点；水平方向是 x 轴，右正左负；竖直方向是 y 轴，下正上负。</p>
<pre class=" language-java"><code class="language-java">    Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 在坐标 (100, 100) 处画一段文字</span>
        canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="Canvas-常用方法"><a href="#Canvas-常用方法" class="headerlink" title="Canvas 常用方法"></a>Canvas 常用方法</h3><ol>
<li><p>drawColor(@ColorInt int color)  </p>
<p> 颜色填充，在整个绘制区域统一涂上指定的颜色。<br> 注：drawRGB，drawARGB 也能达到这个效果，一般用于在绘制之前设置底色，或者在绘制之后为界面设置半透明蒙版。</p>
</li>
<li><p>drawCircle(float centerX, float centerY, float radius, Paint paint)</p>
<p> 画圆，centerX centerY 是圆心的坐标，第三个参数 radius 是圆的半径，单位都是像素，paint 提供基本信息之外的所有风格信息，例如颜色、线条粗细、阴影等。</p>
</li>
<li><p>drawRect(float left, float top, float right, float bottom, Paint paint)</p>
<p> 画矩形，left, top, right, bottom 是矩形四条边的坐标。还有 drawRect(RectF rect, Paint paint) 和 drawRect(Rect rect, Paint paint) 两个重载方法。</p>
</li>
<li><p>drawPoint(float x, float y, Paint paint)</p>
<p> 画点，x，y 是点的坐标，点的大小可以通过 paint.setStrokeWidth(width) 来设置；点的形状可以通过  paint.setStrokeCap(cap) 来设置。</p>
</li>
<li><p>drawOval(float left, float top, float right, float bottom, Paint paint)</p>
<p> 画椭圆，只能绘制横着的或者竖着的椭圆，不能绘制斜的，left, top, right, bottom 是这个椭圆的左、上、右、下四个边界点的坐标。重载方法 drawOval(RectF rect, Paint paint)。</p>
</li>
<li><p>drawLine(float startX, float startY, float stopX, float stopY, Paint paint)</p>
<p> 画线，startX, startY, stopX, stopY 分别是线的起点和终点坐标。drawLines(float[] pts, int offset, int count, Paint paint) / drawLines(float[] pts, Paint paint) 画线（批量）。</p>
</li>
<li><p>drawRoundRect(float left, float top, float right, float bottom, float rx, float ry, Paint paint)</p>
<p> 画圆角矩形，重载方法 drawRoundRect(RectF rect, float rx, float ry, Paint paint)。</p>
</li>
<li><p>drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint)</p>
<p> 绘制弧形或扇形，drawArc() 是使用一个椭圆来描述弧形的。left, top, right, bottom 描述的是这个弧形所在的椭圆；startAngle 是弧形的起始角度（x 轴的正向，即正右的方向，是 0 度的位置；顺时针为正角度，逆时针为负角度），sweepAngle 是弧形划过的角度；useCenter 表示是否连接到圆心，如果不连接到圆心，就是弧形，如果连接到圆心，就是扇形。</p>
</li>
<li><p>drawBitmap(Bitmap bitmap, float left, float top, Paint paint)</p>
<p> 画 Bitmap，left 和 top 是要把 bitmap 绘制到的位置坐标。</p>
</li>
<li><p>drawText(String text, float x, float y, Paint paint) 绘制文字</p>
<p> x 和 y 是绘制的起点坐标。</p>
</li>
</ol>
<h3 id="Canvas-drawPath-自定义图形"><a href="#Canvas-drawPath-自定义图形" class="headerlink" title="Canvas.drawPath() 自定义图形"></a>Canvas.drawPath() 自定义图形</h3><p>drawPath() 可以绘制自定义图形，用于常用方法满足不了的时候，画出自定义图形。Path 有两类方法，一类是直接描述路径的，另一类是辅助的设置或计算。</p>
<pre class=" language-java"><code class="language-java">    Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Path path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">{</span>
        path<span class="token punctuation">.</span><span class="token function">addCircle</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> Path<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>CW<span class="token punctuation">)</span><span class="token punctuation">;</span>
        path<span class="token punctuation">.</span><span class="token function">addCircle</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> Path<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>CCW<span class="token punctuation">)</span><span class="token punctuation">;</span>
        path<span class="token punctuation">.</span><span class="token function">setFillType</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>FillType<span class="token punctuation">.</span>INVERSE_EVEN_ODD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="Path-直接描述路径"><a href="#Path-直接描述路径" class="headerlink" title="Path 直接描述路径"></a>Path 直接描述路径</h4><ol>
<li><p>使用 addXxx() 添加子图形</p>
<p> 添加时需要指定 dir 即画笔绘制的方向。路径方向有两种：顺时针 (CW clockwise) 和逆时针 (CCW counter-clockwise) 。对于普通情况，这个参数填 <code>Path.Direction.CW</code> 还是填 <code>Path.Direction.CCW</code> 没有影响。它只是在需要填充图形 (Paint.Style 为 FILL 或 FILL_AND_STROKE) ，并且图形出现自相交时，用于判断填充范围的。<br> eg：addCircle(float x, float y, float radius, Direction dir) 添加圆。</p>
</li>
<li><p>使用 xxxTo() 画线（直线或曲线）</p>
<p> eg：lineTo(float x, float y) / rLineTo(float x, float y) 画直线，从当前位置向目标位置画一条直线， x 和 y 是目标位置的坐标。这两个方法的区别是，lineTo(x, y) 的参数是绝对坐标，而 rLineTo(x, y) 的参数是相对当前位置的相对坐标 （前缀 r 指的就是 relatively 「相对地」)。当前位置：所谓当前位置，即最后一次调用画 Path 的方法的终点位置。初始值为原点 (0, 0)。</p>
</li>
<li><p>close() 封闭当前子图形</p>
<p> 它的作用是把当前的子图形封闭，即由当前位置向当前子图形的起点绘制一条直线。</p>
</li>
<li><p>moveTo(float x, float y) / rMoveTo(float x, float y)</p>
<p> 移动到目标位置，设置图形的起点。</p>
</li>
<li><p>drawPath(path, paint)</p>
<p> 画出图形  </p>
</li>
</ol>
<h4 id="Path-辅助的设置或计算"><a href="#Path-辅助的设置或计算" class="headerlink" title="Path 辅助的设置或计算"></a>Path 辅助的设置或计算</h4><ol>
<li><p>setFillType(Path.FillType ft)</p>
<p> 设置填充方式<br> EVEN_ODD<br> WINDING （默认值）<br> INVERSE_EVEN_ODD<br> INVERSE_WINDING  </p>
</li>
</ol>
<h3 id="Paint-常用方法"><a href="#Paint-常用方法" class="headerlink" title="Paint 常用方法"></a>Paint 常用方法</h3><ol>
<li><p>setColor(int color)</p>
<p> 用来设置绘制内容的颜色。</p>
</li>
<li><p>setStyle(Paint.Style style)</p>
<p> 设置绘制模式：<br> Paint.Style.FILL：填充模式（默认）。<br> Paint.Style.STROKE：画线模式，勾边模式。<br> Paint.Style.FILL_AND_STROKE：两种模式都启用。</p>
</li>
<li><p>setStrokeWidth(float width)</p>
<p> 设置线条的宽度，STROKE 和 FILL_AND_STROKE 模式下有效。</p>
</li>
<li><p>setAntiAlias(boolean aa)</p>
<p> 动态设置抗锯齿，也可以创建时设置 Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG); 抗锯齿可以让边缘平滑，但也会让颜色失真。</p>
</li>
<li><p>setTextSize(float textSize)</p>
<p> 设置文字大小。</p>
</li>
<li><p>setStrokeCap(Paint.Cap cap)</p>
<p> 设置线条的形状：<br> Paint.Cap.ROUND 圆头，笔画以半圆形突出，中心位于路径的尽头。<br> Paint.Cap.SQUARE 方头，笔画以方形突出，中心位于路径的尽头。<br> Paint.Cap.BUTT 平头，不超过路径结束点。  </p>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自定义-View&quot;&gt;&lt;a href=&quot;#自定义-View&quot; class=&quot;headerlink&quot; title=&quot;自定义 View&quot;&gt;&lt;/a&gt;自定义 View&lt;/h1&gt;&lt;p&gt;自定义控件继承于 View，我们按自己的需要复写其构造、onMeasure、onLayout
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="自定义 View" scheme="https://bearzpy.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89-View/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 基础介绍</title>
    <link href="https://bearzpy.github.io/2017/04/06/gradle/Gradle%20%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/"/>
    <id>https://bearzpy.github.io/2017/04/06/gradle/Gradle 基础介绍/</id>
    <published>2017-04-06T10:39:10.000Z</published>
    <updated>2018-03-06T04:27:19.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><p>本篇文章主要讲述 Gradle 的基本知识点，帮助大家了解 Gradle。</p>
<h2 id="Gradle-背景知识"><a href="#Gradle-背景知识" class="headerlink" title="Gradle 背景知识"></a>Gradle 背景知识</h2><p>先介绍概念：</p>
<blockquote>
<p>Gradle 是一个基于 Apache Ant 和 Apache Maven 概念的项目自动化建构工具。它使用一种基于 Groovy 的特定领域语言来声明项目设置，而不是传统的 XML 。</p>
</blockquote>
<p>这个概念我们先不用去理解，只要知道 Gradle 是一个自动化构建工具就可以了。那么为什么我们在开发 Android 程序的时候需要去使用自动化构建工具呢？答案很简单，就是构建一个 Android 工程需要做很多重复性很高的事情，手动干这些事麻烦又浪费时间，所以我们选择让机器去做。好吧，我承认就是懒，聪明的开发者都愿意找一个正确，高效又能偷懒的方法。</p>
<p>Gradle 是 Google I/O 2013 大会上发布的，用来替换 Ant 和 Maven 的新工具，替换旧工具的原因当然是它们不能让开发者继续开心的懒下去了。</p>
<p>简单讲一下 Ant，Maven 和 Gradle 的关系，这是个题外话。Ant 可以自动化打包，但是许多东西要手动下载添加。Maven 既可以自动化打包，也能帮下载你需要的东西，但是它的逻辑策略写起来很麻烦。两个工具都不大好用，为了能开心的偷懒，Gradle 应运而生。Gradle 集成了上面的功能，非常方别开发使用，但由于某些网络问题，导致初学者使用起来体验并不好。</p>
<h2 id="Gradle-文件结构"><a href="#Gradle-文件结构" class="headerlink" title="Gradle 文件结构"></a>Gradle 文件结构</h2><p>Android Studio 创建 Android 工程的时候会创建许多文件，这让不熟悉的人分不清楚不同文件的意义，这里我们先介绍一个最简单的 Gradle 结构，如下图。</p>
<p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/gradle_mimi_unit.png" alt="gradle_mimi_unit"></p>
<p>这个结构一共有 5 个文件。其中 build.gradle 是我们需要编写的 Gradle 的脚本文件，另外四个文件组成了一个 Gradle 中的重要结构：Gradle Wrapper（Gradle 封装器）。</p>
<h3 id="Gradle-Wrapper"><a href="#Gradle-Wrapper" class="headerlink" title="Gradle Wrapper"></a>Gradle Wrapper</h3><p>不同的开发者可能使用不同版本的 Gradle 来构建 Android 项目，多人开发的时候使用不同版本的构建工具，可能出现莫名其妙的问题。大家也都遇到过某个软件在这个电脑上没问题，在另外的电脑上有问题的情况吧。Gradle 封装器就是用来解决这个问题的，每一个封装器都绑定了一个特定版本的 Gradle，当你运行 Gradle 命令的时候，它会先下载相应的 Gradle 版本，并使用这个版本来执行构建，这样就避免了环境不统一的问题。这是个很棒的功能，但由于某些网络问题，下载会超时，导致了很多新手都栽在了这里。这里就不讲述怎么下 Gradle 了，网上很多这方面的资料。</p>
<p>为了完整起见，不要删除 Gradle 封装器里的文件或改变目录结构，这里介绍一下封装器里文件的功能</p>
<ul>
<li>gradlew （Unix Shell 脚本）</li>
<li>gradlew.bat （Windows 批处理文件）</li>
<li>gradle/wrapper/gradle-wrapper.jar （Jar 包）</li>
<li>gradle/wrapper/gradle-wrapper.properties （封装器属性）  </li>
</ul>
<p>Gradle 版本会被下载到用户目录下的 .gradle/wrapper/dists 中。<br>查看 gradle-wrapper.properties 文件可以看到当前封装器使用的 gradle 版本号。  </p>
<p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/gradle_wrapper_properties.png" alt="gradle_wrapper_properties"></p>
<p>Unix Shell 环境下使用 gradlew 命令<br><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/unix_shell.png" alt="unix_shell"></p>
<p>Windows 环境下使用 gradlew.bat  命令<br><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/windows_cmd.png" alt="windows_cmd"></p>
<h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>build.gradle 是构建所需要的脚本文件，这里给一个最简单的示例。</p>
<p>新建了一个名为 hello 的任务，输出 Hello World。</p>
<pre class=" language-java"><code class="language-java">task hello <span class="token punctuation">{</span>
    println <span class="token string">"Hello World!"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>执行 gradlew.bat hello 就能看见 Hello World 输出在控制台上了。</p>
<p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/task_hello.png" alt="task_hello"></p>
<h2 id="Android-Studio-里的-Gradle"><a href="#Android-Studio-里的-Gradle" class="headerlink" title="Android Studio 里的 Gradle"></a>Android Studio 里的 Gradle</h2><p>这里新建一个空的工程，来介绍 Gradle 的作用。</p>
<h3 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h3><p>Android Studio 是按项目建立的，项目里面可以有不同的 app 模块，简单的说一个项目可以编出几个不同的 app 软件。</p>
<p>项目目录界面如下<br><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/android_project.png" alt="android_project"></p>
<p>下面介绍目录中 build.gradle 和 Gradle 封装器之外的部分。</p>
<ul>
<li>.gradle 文件夹下放的是 Gradle 构建时的记录信息，无需关心</li>
<li>.idea 是 Android Studio 工程记录信息，无需关心</li>
<li>app 存放对于的模块文件，这里就是我们开发的app</li>
<li>build 存放的是 Gradle 在构建项目的时候生产的文件</li>
<li>.gitignore 是版本控制忽略文件，和 Gradle 无关</li>
<li>MyApplication.iml 生成文件，无需关心</li>
<li>local.properties 存放的 SDK，NDK 在本机上的目录</li>
<li>gradle.properties 存放的是整个项目 Gradle 的配置文件</li>
<li>settings.gradle 存放的是这个项目包括那些模块，当前只包括一个 app 模块</li>
</ul>
<h3 id="项目构建脚本"><a href="#项目构建脚本" class="headerlink" title="项目构建脚本"></a>项目构建脚本</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span>

buildscript <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 配置构建脚本</span>
    repositories <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 添加远程依赖库</span>
        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// JCenter 仓库</span>
    <span class="token punctuation">}</span>
    dependencies <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 配置构建依赖插件</span>
        <span class="token comment" spellcheck="true">// 声明了一个 构建 Android 的 Gradle 插件</span>
        <span class="token comment" spellcheck="true">// Gradle 本身是构建不了 Android 的</span>
        classpath <span class="token string">'com.android.tools.build:gradle:2.2.3'</span>

        <span class="token comment" spellcheck="true">// NOTE: Do not place your application dependencies here; they belong</span>
        <span class="token comment" spellcheck="true">// in the individual module build.gradle files</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

allprojects <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 配置整个项目</span>
    <span class="token comment" spellcheck="true">// Android 开发经常需要用一些支持库，这些支持库都有专门的网路存放地，供开发中下载</span>
    repositories <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 添加远程依赖库</span>
        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// JCenter 仓库</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

task <span class="token function">clean</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Delete<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// clean 任务清理构建生成的文件</span>
    delete rootProject<span class="token punctuation">.</span>buildDir  <span class="token comment" spellcheck="true">// 删除 build 文件夹</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="模块目录"><a href="#模块目录" class="headerlink" title="模块目录"></a>模块目录</h3><p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/android_module.png" alt="android_module"></p>
<ul>
<li>build 存放着编译生成的文件</li>
<li>libs 放的是模块编译需要使用的库文件</li>
<li>src 放着源码和资源文件</li>
<li>.gitignore 是版本控制忽略文件，和 Gradle 无关</li>
<li>app.iml 生成文件，无需关心</li>
<li>build.gradle 是模块构建脚本</li>
<li>proguard-rules.pro 是模块混淆规则，防止 app 被破解的</li>
</ul>
<h3 id="模块构建脚本"><a href="#模块构建脚本" class="headerlink" title="模块构建脚本"></a>模块构建脚本</h3><pre class=" language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'com.android.application'</span>  <span class="token comment" spellcheck="true">// 标明这个脚本是编译 android 应用程序用的</span>

android <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 编译 apk 文件配置</span>
    compileSdkVersion <span class="token number">25</span>  <span class="token comment" spellcheck="true">// SDK 版本号 API 25</span>
    buildToolsVersion <span class="token string">"25.0.2"</span> <span class="token comment" spellcheck="true">// 使用的编译工具的版本号</span>
    defaultConfig <span class="token punctuation">{</span>
        applicationId <span class="token string">"com.io.bearzpy.myapplication"</span> <span class="token comment" spellcheck="true">// 表明 APP 在系统中的唯一 ID</span>
        minSdkVersion <span class="token number">19</span>  <span class="token comment" spellcheck="true">// 兼顾最老的系统版本</span>
        targetSdkVersion <span class="token number">25</span> <span class="token comment" spellcheck="true">// 经过充分测试的版本</span>
        versionCode <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 代码版本给系统实际区分不同版本</span>
        versionName <span class="token string">"1.0"</span> <span class="token comment" spellcheck="true">// 版本名字给人区分不同版本</span>
        <span class="token comment" spellcheck="true">// 使用单元测试框架</span>
        testInstrumentationRunner <span class="token string">"android.support.test.runner.AndroidJUnitRunner"</span>
    <span class="token punctuation">}</span>
    buildTypes <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 构建变量</span>
        release <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 发布版本</span>
            <span class="token comment" spellcheck="true">// 这一部分是防止应用被人破解的</span>
            minifyEnabled <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 控制是否运行混淆的</span>
            <span class="token comment" spellcheck="true">// 混淆规则设置</span>
            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 添加依赖</span>
    <span class="token comment" spellcheck="true">// 导入 libs 文件夹下所有的 jar 包</span>
    compile <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token operator">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 测试应用接口的依赖</span>
    <span class="token function">androidTestCompile</span><span class="token punctuation">(</span><span class="token string">'com.android.support.test.espresso:espresso-core:2.2.2'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        exclude group<span class="token operator">:</span> <span class="token string">'com.android.support'</span><span class="token punctuation">,</span> module<span class="token operator">:</span> <span class="token string">'support-annotations'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 兼容低版本系统的依赖</span>
    compile <span class="token string">'com.android.support:appcompat-v7:25.2.0'</span>
    <span class="token comment" spellcheck="true">// 单元测试的依赖</span>
    testCompile <span class="token string">'junit:junit:4.12'</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="依赖库管理"><a href="#依赖库管理" class="headerlink" title="依赖库管理"></a>依赖库管理</h3><p>开发者经常会使用一些已有的现成的，可以直接拿来用的解决方案，这极大的提高了开发效率，也着实让他们能够偷懒了，但是这也造成了一些问题。比如当你同时使用这个两个方案解决不同的事情，这两个方案共用了同一个依赖库，但是却使用了不同的版本，这会为我们的程序带来意外的问题。Gradle 拥有解决依赖冲突的能力，它可以自动下载使用合适的版本，尽量帮开发者解决依赖库冲突问题，如果它解决不了，也会报个错给你。</p>
<h3 id="编译不同的-app-版本"><a href="#编译不同的-app-版本" class="headerlink" title="编译不同的 app 版本"></a>编译不同的 app 版本</h3><p>实际开发中，开发者往往要准备好几个版本，比如调试版本，发布版本，不同手机厂商使用的版本，都考开发者手动准备也是很费力且容易出错的。Gradle 也提供了构建多版本的功能。例如，模块构建脚本中的构建变量增加了 release 版本，我们可以在 Android Studio 的 Build Variants 里面选则 release 版本，再次编译生成的就是 release 版本了。同理，我们也可以在构建脚本中添加其他的版本，比如付费版本和免费版本等等。</p>
<p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/release.png" alt="release"></p>
<h3 id="Gradle-是怎么工作的"><a href="#Gradle-是怎么工作的" class="headerlink" title="Gradle 是怎么工作的"></a>Gradle 是怎么工作的</h3><p>每一个 Gradle 需要完成的工作都是一个任务，这些任务之间有着先后顺序，相互依赖的关系，而 Android 应用程序的构建需要许多这样的任务。Android Studio 有 Gradle 的控制面板可以查看当前项目有哪些任务。</p>
<p>这是一个空的项目所拥有的任务，可以看到项目本身有相当多的任务，对应的模块还有相当多的任务。<br><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/gradle_contol.png" alt="gradle_contol"></p>
<p>选择一个任务双击可以运行，这里以 build 为例，Run 面板中可以看到所有被执行的任务：<br><img src="https://github.com/BearZPY/blog-img-repository/raw/master/gradle/build_task.png" alt="build_task"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>每当我们修改完程序之后都需要进行编译，然而编译需要这么多的步骤，如果每次都要手动去进行编译，即使能保证人工不出错，所耗费的时间也相当的大，所以有了自动化构建工具。我们在 Android Studio 中点一个 Run 就能完成的工作，实际上由自动化构建工具帮我们处理很多重复的劳动。而当旧的自动化构建工具不能满足我们的需求时，必然会有开发者去更新自动化构建工具，这也是 Android Studio 和 Gradle 成为 Android 开发使用的主流工具的原因。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gradle&quot;&gt;&lt;a href=&quot;#Gradle&quot; class=&quot;headerlink&quot; title=&quot;Gradle&quot;&gt;&lt;/a&gt;Gradle&lt;/h1&gt;&lt;p&gt;本篇文章主要讲述 Gradle 的基本知识点，帮助大家了解 Gradle。&lt;/p&gt;
&lt;h2 id=&quot;Grad
    
    </summary>
    
      <category term="Gradle" scheme="https://bearzpy.github.io/categories/Gradle/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="Gradle" scheme="https://bearzpy.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>用 Python 实现 Http 服务端</title>
    <link href="https://bearzpy.github.io/2017/03/23/Python/%E7%94%A8%20Python%20%E5%AE%9E%E7%8E%B0%20Http%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>https://bearzpy.github.io/2017/03/23/Python/用 Python 实现 Http 服务端/</id>
    <published>2017-03-23T12:47:56.000Z</published>
    <updated>2018-03-08T02:02:02.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用-Python-实现-Http-服务端"><a href="#用-Python-实现-Http-服务端" class="headerlink" title="用 Python 实现 Http 服务端"></a>用 Python 实现 Http 服务端</h1><p>Android 开发中常常有很多使用 Http 进行交互的时候，有时候想测试一些 API 功能可能需要后台的配合，但是往往需要双方都有空的时候才行，效率不高。测试 API 的时候，有些简单功能不妨用 Python 自己写一个 Http Service 来实现。</p>
<h2 id="实现一个简单的服务器"><a href="#实现一个简单的服务器" class="headerlink" title="实现一个简单的服务器"></a>实现一个简单的服务器</h2><p>Python 内置了一个简单的服务器，使用命令行命令就可以启动一个 Http Service，默认可以作为文件服务器，以当前操作的文件夹为目录，显示该文件夹下的内容，如果当前文件夹有 index.html 文件，则会默认显示该文件。端口是可选的，不填会采用缺省端口 8000，在浏览器中访问地址 <code>http://localhost:8000</code>，就能看到文件服务器。</p>
<p>Python2 命令</p>
<ul>
<li>python -m SimpleHTTPServer 8080</li>
</ul>
<p>Python3 命令</p>
<ul>
<li>python -m http.server 8080</li>
</ul>
<h2 id="自定义-API-服务器"><a href="#自定义-API-服务器" class="headerlink" title="自定义 API 服务器"></a>自定义 API 服务器</h2><p>简单的文件服务器有时候不能满足我们的需求，我们需要测试一些 API 接口，这个时候我们可以使用 Python 编写一个处理 API 的服务器。</p>
<ul>
<li>HTTPServer 可以让我们为服务器指定一个本机地址和端口，同时配置使用我们的自定义 http 处理类</li>
<li>BaseHTTPRequestHandler 继承此类后，我们可以自定义 do_GET()，do_POST() 等方法处理客户端 url 请求</li>
<li>对 url 的路径和参数进行分离，进行对应的业务逻辑处理</li>
<li>send_response() 设置 Http 返回码，会自动设置 Message</li>
<li>send_header() 设置 Http 头信息，以 end_headers() 确认头信息完成</li>
<li>wfile.write() 写入 Http body 数据，文件使用 ‘rb’ 读取后写入，String 正常写入</li>
</ul>
<p>注： 调用 end_headers() 之后，再调用 send_header() 等操作会把数据写入 body 中。</p>
<p>以下为示例程序，python3 版本：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time
<span class="token keyword">import</span> getHandler
<span class="token keyword">from</span> http<span class="token punctuation">.</span>server <span class="token keyword">import</span> BaseHTTPRequestHandler<span class="token punctuation">,</span> HTTPServer

HOST <span class="token operator">=</span> <span class="token string">'192.168.137.1'</span>
PORT_NUMBER <span class="token operator">=</span> <span class="token number">8080</span>


<span class="token keyword">class</span> <span class="token class-name">TestHttpHandler</span><span class="token punctuation">(</span>BaseHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">do_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token operator">//</span> 业务逻辑处理
        ret_code<span class="token punctuation">,</span> ret_byte <span class="token operator">=</span> getHandler<span class="token punctuation">.</span>handler<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
        <span class="token operator">//</span> 设置相应码
        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span>ret_code<span class="token punctuation">)</span>
        <span class="token keyword">if</span> ret_byte <span class="token keyword">is</span> None<span class="token punctuation">:</span>
            <span class="token operator">//</span> 无 body
            <span class="token operator">//</span> 确认头信息
            self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token operator">//</span> 设置返回长度
        self<span class="token punctuation">.</span>send_header<span class="token punctuation">(</span><span class="token string">'Content-Length'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>ret_byte<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">//</span> 确认头信息
        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">//</span> 写入 body 数据
        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ret_byte<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">do_POST</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">do_PUT</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">do_DELETE</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">start_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    http_server <span class="token operator">=</span> HTTPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT_NUMBER<span class="token punctuation">)</span><span class="token punctuation">,</span> TestHttpHandler<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Server Starts - %s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT_NUMBER<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        http_server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    http_server<span class="token punctuation">.</span>server_close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Server Stops - %s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT_NUMBER<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    start_server<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用-Python-实现-Http-服务端&quot;&gt;&lt;a href=&quot;#用-Python-实现-Http-服务端&quot; class=&quot;headerlink&quot; title=&quot;用 Python 实现 Http 服务端&quot;&gt;&lt;/a&gt;用 Python 实现 Http 服务端&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Python" scheme="https://bearzpy.github.io/categories/Python/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="Python" scheme="https://bearzpy.github.io/tags/Python/"/>
    
      <category term="Python3" scheme="https://bearzpy.github.io/tags/Python3/"/>
    
      <category term="Http" scheme="https://bearzpy.github.io/tags/Http/"/>
    
      <category term="Service" scheme="https://bearzpy.github.io/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>使用git clean清理工程文件</title>
    <link href="https://bearzpy.github.io/2017/02/17/git/%E4%BD%BF%E7%94%A8git%20clean%E6%B8%85%E7%90%86%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6/"/>
    <id>https://bearzpy.github.io/2017/02/17/git/使用git clean清理工程文件/</id>
    <published>2017-02-17T11:03:22.000Z</published>
    <updated>2018-04-11T03:15:23.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h1><p>工程代码在编译的时候往往会生产很多的文件，在项目需要移动复制或者备份的时候这些文件是无用的，所以大部分 IDE 都提供了 clean 工程的功能， 但是有时候 IDE 提供的功能并不能满足我们的需求，所以往往需要使用其他的清理工具来完成我们的要求（例如编写 Windows 下的 clean bat 执行文件）。这里主要介绍使用 git clean 来给工程瘦身的方法。<br>使用情景：Android studio（2.2.3） 编译时在build文件夹下生成了几十 MB 的mockable-android-XX.jar。然而 AS 提供的 clean 并没有清除这些文件， 导致 clean 后的工程还是占用了很大的体积。</p>
<h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><p>项目需要使用 git 来管理，且重要的文件已经用 git 记录追踪。</p>
<h2 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h2><p>git clean 用于清理 git 根目录下所有没有被 track 的文件和文件夹<br>使用 git clean -h 获取命令的帮助手册。<br><img src="https://github.com/BearZPY/blog-img-repository/raw/master/git/clean/git_clean_help.png" alt="help document"></p>
<p>常用参数介绍：  </p>
<ol>
<li>-n  打印出需要清理的文件和文件夹（不会真的删除）</li>
<li>-f  强制删除（并不是删除文件的意思）</li>
<li>-d 删除整个文件夹（包括文件，-n 不会显示文件夹里面的文件）</li>
<li>-x 对 .gitignore 文件中忽略的文件及文件夹进行清理（不加上-d参数的话只能清理文件）</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>使用 git clean 清除时最好先加上 -n 参数查看清理的对象，如果清理文件夹的话，需要明确文件夹里是否有重要的文件数据，避免误删。<br>-f 是强制删除，可以在 -xd 删除失败的时候加上。<br>不希望删除的文件加入git管理（add，commit）就可以了。</p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>列举了清理 Android Studio 构建的 APP 项目 TodoList 所使用的指令输入和打印输出。</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clean -nd
</code></pre>
<p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/git/clean/git_clean_nd.png" alt="help document"></p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clean -nx
</code></pre>
<p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/git/clean/git_clean_nx.png" alt="help document"></p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clean -nxd
</code></pre>
<p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/git/clean/git_clean_nxd.png" alt="help document"></p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clean -xd
</code></pre>
<p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/git/clean/git_clean_xd.png" alt="help document"></p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clean -fxd
</code></pre>
<p><img src="https://github.com/BearZPY/blog-img-repository/raw/master/git/clean/git_clean_fxd.png" alt="help document"></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-clean&quot;&gt;&lt;a href=&quot;#git-clean&quot; class=&quot;headerlink&quot; title=&quot;git clean&quot;&gt;&lt;/a&gt;git clean&lt;/h1&gt;&lt;p&gt;工程代码在编译的时候往往会生产很多的文件，在项目需要移动复制或者备份的时候这些文件是
    
    </summary>
    
      <category term="git" scheme="https://bearzpy.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://bearzpy.github.io/tags/git/"/>
    
      <category term="clean project" scheme="https://bearzpy.github.io/tags/clean-project/"/>
    
      <category term="android studio" scheme="https://bearzpy.github.io/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>大数任意进制转换</title>
    <link href="https://bearzpy.github.io/2016/10/15/C/%E5%A4%A7%E6%95%B0%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>https://bearzpy.github.io/2016/10/15/C/大数任意进制转换/</id>
    <published>2016-10-15T11:21:04.000Z</published>
    <updated>2018-04-12T02:54:53.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大数任意进制转换"><a href="#大数任意进制转换" class="headerlink" title="大数任意进制转换"></a>大数任意进制转换</h1><p>项目中有地方需要将 16 进制的大数转换成 10 进制的大数，实际在发现网上很多计算器在大数太大的时候会丢失精度（比如：js 中规定安全整数的范围是 -2^53 ~ 2^53，所以大于 9007199254740991 的数进制转换会存在精度问题），所以得自己按照逻辑实现一个 C 语言版本的大数进制转换，这其实是 oj 平台算法题里面的题目，因为曾经做过大数类的题目，所以实现起来还是比较简单的。</p>
<h2 id="转换原理"><a href="#转换原理" class="headerlink" title="转换原理"></a>转换原理</h2><p>大数和普通数据的转换原则都是 “模 n 取余法”，其中先余为低位，后余为高位。到这步可能就想要实现一个大数除法了，但是因为可见字符数量比较少，实际上除数并不可能是一个大数，目前能用的一般都是 2 - 62 进制，对应着 0-9，a-z，A-Z，即区分英文字母大小写。大数所使用的模 n 取余法和普通书使用的模 n 取余法原理是一样的但是形态是不一样的。</p>
<p>基本模 n 取余法：</p>
<pre class=" language-c"><code class="language-c"><span class="token number">10</span> 进制数 <span class="token number">12</span> 转换为 <span class="token number">2</span> 进制 <span class="token number">1100</span>

计算过程：
<span class="token number">12</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">0</span>
<span class="token number">6</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">0</span>
<span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">1</span>
<span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">1</span>

按照先余为低位，后余为高位，则 <span class="token number">2</span> 进制是 <span class="token number">1100</span>。
</code></pre>
<p>大数模 n 取余法算法描述：</p>
<pre class=" language-c"><code class="language-c"><span class="token number">2</span> 进制大数 <span class="token number">1011</span> 转换为 <span class="token number">3</span> 进制大数 <span class="token number">102</span>

计算过程：

先取最低位余数

<span class="token number">1</span><span class="token punctuation">.</span> 按次序从大数 <span class="token number">1011</span> 中取数，取出数为 <span class="token number">1</span>
<span class="token number">2</span><span class="token punctuation">.</span> 值 <span class="token number">1</span> <span class="token operator">&lt;</span> 目标进制数 <span class="token number">3</span>，则商位为 <span class="token number">0</span> 余数为 <span class="token number">1</span>
<span class="token number">3</span><span class="token punctuation">.</span> 按次序从大数 <span class="token number">1011</span> 中取数，取出数为 <span class="token number">0</span>
<span class="token number">4</span><span class="token punctuation">.</span> 余数 <span class="token number">1</span> 乘上原进制数 <span class="token number">2</span>，加上取出数 <span class="token number">0</span>
<span class="token number">5</span><span class="token punctuation">.</span> 值 <span class="token number">2</span> <span class="token operator">&lt;</span> 目标进制数 <span class="token number">3</span>，则商位为 <span class="token number">0</span>，余数为 <span class="token number">2</span>
<span class="token number">6</span><span class="token punctuation">.</span> 按次序从大数 <span class="token number">1011</span> 中取数，取出数为 <span class="token number">1</span>
<span class="token number">7</span><span class="token punctuation">.</span> 余数 <span class="token number">2</span> 乘上原进制数 <span class="token number">2</span>，加上取出数 <span class="token number">1</span>
<span class="token number">8</span><span class="token punctuation">.</span> 值 <span class="token number">5</span> <span class="token operator">></span> 目标进制数 <span class="token number">3</span>，则商位为 <span class="token number">1</span> 余数为 <span class="token number">2</span>
<span class="token number">9</span><span class="token punctuation">.</span> 按次序从大数 <span class="token number">1011</span> 中取数，取出数为 <span class="token number">1</span>
<span class="token number">10</span><span class="token punctuation">.</span> 余数 <span class="token number">2</span> 乘上原进制数 <span class="token number">2</span>，加上取出数 <span class="token number">1</span>
<span class="token number">11</span><span class="token punctuation">.</span> 值 <span class="token number">5</span> <span class="token operator">></span> 目标进制数 <span class="token number">3</span>，则商位为 <span class="token number">1</span> 余数为 <span class="token number">2</span>，将余数记录下来

重新计算商
<span class="token number">12</span><span class="token punctuation">.</span> 第一次计算后商为 <span class="token number">0011</span>，去除前置 <span class="token number">0</span>，作为新的大数，该值为 <span class="token number">11</span>
<span class="token number">13</span><span class="token punctuation">.</span> 将大数 <span class="token number">11</span> 按照取最低位余数步骤再次取最低位余数，新的商重新转换位大数，直至计算商小于目标进制数 <span class="token number">3</span> 结束。

<span class="token number">1011</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0011</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">2</span>
<span class="token number">0011</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0001</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">0</span>
<span class="token number">0001</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">1</span>

数据处理
<span class="token number">14</span><span class="token punctuation">.</span> 此时得到余数位 <span class="token number">201</span>，按照先余为低位，后余为高位，对其反转变为 <span class="token number">102</span>。

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">10</span> 进制大数 <span class="token number">12</span> 转换为 <span class="token number">2</span> 进制大数 <span class="token number">1100</span>

计算过程：

先取最低位余数

<span class="token number">1</span><span class="token punctuation">.</span> 按次序从大数 <span class="token number">12</span> 中取数，取出数为 <span class="token number">1</span>
<span class="token number">2</span><span class="token punctuation">.</span> 值 <span class="token number">1</span> <span class="token operator">&lt;</span> 目标进制数 <span class="token number">2</span>，则商位为 <span class="token number">0</span> 余数为 <span class="token number">1</span>
<span class="token number">3</span><span class="token punctuation">.</span> 按次序从大数 <span class="token number">12</span> 中取数，取出数为 <span class="token number">2</span>
<span class="token number">4</span><span class="token punctuation">.</span> 余数 <span class="token number">1</span> 乘上原进制数 <span class="token number">10</span>，加上取出数为 <span class="token number">12</span>
<span class="token number">5</span><span class="token punctuation">.</span> 值 <span class="token number">12</span> <span class="token operator">></span> 目标进制数 <span class="token number">2</span>，则商位为 <span class="token number">6</span>，余数为 <span class="token number">0</span>，将余数记录下来

重新计算商
<span class="token number">6</span><span class="token punctuation">.</span> 第一次计算后商为 <span class="token number">06</span>，去除前置 <span class="token number">0</span>，作为新的大数，该值为 <span class="token number">6</span>
<span class="token number">7</span><span class="token punctuation">.</span> 将大数 <span class="token number">6</span> 按照取最低位余数步骤再次取最低位余数，新的商重新转换位大数，直至计算商小于目标进制数 <span class="token number">2</span> 结束。

<span class="token number">12</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">0</span>
<span class="token number">6</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">0</span>
<span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">1</span>
<span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 余 <span class="token number">1</span>

数据处理
<span class="token number">8</span><span class="token punctuation">.</span> 此时得到余数位 <span class="token number">0011</span>，按照先余为低位，后余为高位，对其反转变为 <span class="token number">1100</span>。
</code></pre>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>根据上面的算法描述就可以编写出精确的大数字串转换，上面描述的只是算法，实际上使用的时候还需要考虑制表符的问题，即可见字符 0-9，a-z，A-Z 的先后位置，这个可以根据需求来调整 a-z，A-Z 的先后位置。</p>
<p>实现代码：<br>制表符：”0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz”</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> BIG_NUMBER_CONVERT_BUFFER_SIZE 1024</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*
大数字串进制转换。
注：
1. 转换复用了 srcData 空间，该字段数据会被改变
2. 输入字串区分大小写，按进制 11 - 36 以大写的英文字母表示，37 - 62 以小写英文字母表示
   即输入 16 进制，则字串中的英文字母必须为大写
3. 转换缓冲 buffer 默认为 1024，可用按照实际需求更改

params：
    srcData：传入的字串，需要以 '\0' 结尾
    destData：传出的字串，需要估计好大致空间
    srcBase：原字串进制，范围 2 - 62
    destBase：目标进制，范围 2 - 62
return：
    编码长度，出错返回负数
*/</span>
<span class="token keyword">int</span> <span class="token function">bigNumConvert</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> srcData<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> destData<span class="token punctuation">,</span> <span class="token keyword">int</span> srcBase<span class="token punctuation">,</span> <span class="token keyword">int</span> destBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">char</span> byteIndex<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span>BIG_NUMBER_CONVERT_BUFFER_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbuffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> src <span class="token operator">=</span> srcData<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> pos <span class="token operator">=</span> srcData<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> dest <span class="token operator">=</span> destData<span class="token punctuation">;</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>src <span class="token operator">==</span> <span class="token constant">NULL</span>
        <span class="token operator">||</span> dest <span class="token operator">==</span> <span class="token constant">NULL</span>
        <span class="token operator">||</span> <span class="token punctuation">(</span>srcBase <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">||</span> srcBase <span class="token operator">>=</span> <span class="token number">62</span><span class="token punctuation">)</span>
        <span class="token operator">||</span> <span class="token punctuation">(</span>destBase <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">||</span> destBase <span class="token operator">>=</span> <span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp <span class="token operator">*</span><span class="token operator">=</span> srcBase<span class="token punctuation">;</span>
            temp <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> destBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">*</span>pbuffer<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token operator">*</span>pbuffer<span class="token operator">++</span> <span class="token operator">=</span> byteIndex<span class="token punctuation">[</span><span class="token punctuation">(</span>temp <span class="token operator">/</span> destBase<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                temp <span class="token operator">%</span><span class="token operator">=</span> destBase<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token operator">*</span>dest<span class="token operator">++</span> <span class="token operator">=</span> byteIndex<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> buffer<span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> pbuffer <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>pos <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> pbuffer <span class="token operator">-</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        src<span class="token punctuation">[</span>pbuffer <span class="token operator">-</span> pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        pos <span class="token operator">=</span> src<span class="token punctuation">;</span>
        pbuffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
        temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">reverseStr</span><span class="token punctuation">(</span>destData<span class="token punctuation">,</span> dest <span class="token operator">-</span> destData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    destData<span class="token punctuation">[</span>dest <span class="token operator">-</span> destData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dest <span class="token operator">-</span> destData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'A'</span><span class="token operator">&amp;&amp;</span>ch <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">36</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        src<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        src<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;大数任意进制转换&quot;&gt;&lt;a href=&quot;#大数任意进制转换&quot; class=&quot;headerlink&quot; title=&quot;大数任意进制转换&quot;&gt;&lt;/a&gt;大数任意进制转换&lt;/h1&gt;&lt;p&gt;项目中有地方需要将 16 进制的大数转换成 10 进制的大数，实际在发现网上很多计算器在大数
    
    </summary>
    
      <category term="C" scheme="https://bearzpy.github.io/categories/C/"/>
    
    
      <category term="C" scheme="https://bearzpy.github.io/tags/C/"/>
    
      <category term="BigNumber" scheme="https://bearzpy.github.io/tags/BigNumber/"/>
    
  </entry>
  
  <entry>
    <title>SQLite 基本操作</title>
    <link href="https://bearzpy.github.io/2016/09/25/SQL/SQLite%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://bearzpy.github.io/2016/09/25/SQL/SQLite 基本操作/</id>
    <published>2016-09-25T15:15:21.000Z</published>
    <updated>2018-03-07T14:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQLite-基本操作"><a href="#SQLite-基本操作" class="headerlink" title="SQLite 基本操作"></a>SQLite 基本操作</h1><p>SQLite 是一款轻型的数据库，是遵守ACID的关联式数据库管理系统，它的设计目标是嵌入式的，而且目前已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就够了。目前最新的版本是 SQLite3。</p>
<h2 id="SQLite-的特点"><a href="#SQLite-的特点" class="headerlink" title="SQLite 的特点"></a>SQLite 的特点</h2><ul>
<li>轻量级</li>
<li>不需要安装/配置，不依赖其他软件</li>
<li>数据库是单一文件，可以自由复制</li>
<li>跨平台/可移植，支持多种开发语言</li>
<li>弱类型字段</li>
<li>兼容 ACID 事务，允许从多个进程或线程安全访问</li>
<li>开源</li>
</ul>
<h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><ul>
<li>VARCHAR(n)：长度不固定且其最大长度为 n 的字串，n不能超过 4000</li>
<li>CHAR(n)：长度固定为n的字串，n不能超过 254</li>
<li>INTEGER：值被标识为整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中</li>
<li>REAL：所有值都是浮动的数值,被存储为8字节的IEEE浮动标记序号</li>
<li>TEXT：值为文本字符串,使用数据库编码存储(TUTF-8, UTF-16BE or UTF-16-LE)</li>
<li>BLOB：值是 BLOB 数据块，以输入的数据格式进行存储</li>
</ul>
<h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><p>在 Android 数据库设计中，如果对数据库有疑问的话，可以将数据库文件复制到电脑上面，在命令行中使用 SQLite3 进行查看。</p>
<p>查看数据库的部分操作</p>
<pre class=" language-bash"><code class="language-bash">// 打开创建数据库
.open headphones.db

// 查看数据库里存在的表
.tables

// 查看创建数据库时语句
.schema headphones

// ascii 模式显示
.mode ascii

// 打开列名称显示
.header on

// 按列对齐
.mode column
</code></pre>
<p>结构化数据库语句</p>
<pre class=" language-bash"><code class="language-bash">
// 创建表
CREATE TABLE headphones <span class="token punctuation">(</span>
    _id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price INTEGER,
    style INTEGER NOT NULL,
    in_stock INTEGER DEFAULT 0,
    description TEXT DEFAULT unknown
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

// 显示表的列名称属性
PRAGMA TABLE_INFO<span class="token punctuation">(</span>headphones<span class="token punctuation">)</span><span class="token punctuation">;</span>

// 删除整个表
DROP TABLE headphones<span class="token punctuation">;</span>

// 从表中选择某列
SELECT <span class="token operator">&lt;</span>columns<span class="token operator">></span> FROM <span class="token operator">&lt;</span>table_name<span class="token operator">></span><span class="token punctuation">;</span>

// 选择表的所有内容
SELECT * FROM headphones<span class="token punctuation">;</span>

// 选择 _id <span class="token operator">==</span> 1 的所有行内容
SELECT * FROM headphones WHERE _id <span class="token operator">==</span> 1<span class="token punctuation">;</span>

// 只选择名字那一列
SELECT name FROM headphones<span class="token punctuation">;</span>

// 选择表的所有内容 按名称升序排列
SELECT * FROM headphones ORDER BY name ASC<span class="token punctuation">;</span>

// 选择表的所有内容 按名称降序排列
SELECT * FROM headphones ORDER BY name DESC<span class="token punctuation">;</span>

// 选择表里 description 列中值为 unknown 的行 按名称降序排列
SELECT name,price FROM headphones WHERE description <span class="token operator">!=</span> <span class="token string">"unknown"</span> ORDER BY name DESC<span class="token punctuation">;</span>

// 插入对应的数据
INSERT INTO headphones <span class="token punctuation">(</span>name,price,style,in_stock<span class="token punctuation">)</span>
    VALUES <span class="token punctuation">(</span><span class="token string">"mytestcase"</span>,0,0,1<span class="token punctuation">)</span><span class="token punctuation">;</span>

// 更新 _id <span class="token operator">=</span> 6 列中的 name 为 toupdate
UPDATE headphones SET name <span class="token operator">=</span> <span class="token string">"toupdate"</span> WHERE _id <span class="token operator">=</span> 6<span class="token punctuation">;</span>

// 更新所有的 price 为 100
UPDATE headphones SET price <span class="token operator">=</span> 100<span class="token punctuation">;</span>

// 删除 _id <span class="token operator">=</span> 5 的行
DELETE FROM headphones WHERE _id <span class="token operator">=</span> 5<span class="token punctuation">;</span>

// 删除表里面所有的内容
DELETE FROM headphones<span class="token punctuation">;</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQLite-基本操作&quot;&gt;&lt;a href=&quot;#SQLite-基本操作&quot; class=&quot;headerlink&quot; title=&quot;SQLite 基本操作&quot;&gt;&lt;/a&gt;SQLite 基本操作&lt;/h1&gt;&lt;p&gt;SQLite 是一款轻型的数据库，是遵守ACID的关联式数据库管理系
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="SQLite3" scheme="https://bearzpy.github.io/tags/SQLite3/"/>
    
      <category term="SQL" scheme="https://bearzpy.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>用 Python 批量处理图片大小</title>
    <link href="https://bearzpy.github.io/2016/08/22/Python/%E7%94%A8%20Python%20%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87/"/>
    <id>https://bearzpy.github.io/2016/08/22/Python/用 Python 批量处理图片/</id>
    <published>2016-08-22T13:32:56.000Z</published>
    <updated>2018-03-08T02:00:29.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-批量处理图片大小"><a href="#Python-批量处理图片大小" class="headerlink" title="Python 批量处理图片大小"></a>Python 批量处理图片大小</h1><p>写博客，文档的时候常常要附上很多图片，但是图片的尺寸往往不符合我们的要求，手动一个一个修改尺寸再保存，太浪费时间了，既然学了 Python，当然就要物尽其用。本文实现了批量修改同级目录下的 image\src 文件夹下的所有图片，并输出到 image\output 文件夹下，可以设定具体像素，也可以只设定水平像素或者垂直像素, 另一边按原图比例进行缩放。使用 Python 处理图片大小需要使用 PIL 库，PIL：Python Imaging Library，是一个图片处理库，需要自行安装。</p>
<h2 id="PIL-读取图片大小"><a href="#PIL-读取图片大小" class="headerlink" title="PIL 读取图片大小"></a>PIL 读取图片大小</h2><p>下面是修改单张图片尺寸的函数。  </p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
set_img_type <span class="token operator">=</span> <span class="token string">""</span>

<span class="token keyword">def</span> <span class="token function">resize_image</span><span class="token punctuation">(</span>filein<span class="token punctuation">,</span> fileout<span class="token punctuation">,</span> set_horizontal_length<span class="token punctuation">,</span> set_vertical_length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> set_vertical_length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> set_horizontal_length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>filein<span class="token punctuation">)</span>
        img_size <span class="token operator">=</span> img<span class="token punctuation">.</span>size
        img_horizontal_length <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        img_vertical_length <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> set_vertical_length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            set_vertical_length <span class="token operator">=</span> set_horizontal_length <span class="token operator">*</span> img_vertical_length <span class="token operator">/</span> img_horizontal_length
        <span class="token keyword">if</span> set_horizontal_length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            set_horizontal_length <span class="token operator">=</span> set_vertical_length <span class="token operator">*</span> img_horizontal_length <span class="token operator">/</span> img_vertical_length
        <span class="token keyword">print</span> img_horizontal_length<span class="token punctuation">,</span> img_vertical_length
        <span class="token keyword">print</span> set_horizontal_length<span class="token punctuation">,</span> set_vertical_length
        <span class="token comment" spellcheck="true"># resize image with high-quality</span>
        out <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>set_horizontal_length<span class="token punctuation">,</span> set_vertical_length<span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>
        <span class="token keyword">if</span> set_img_type <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>
            out<span class="token punctuation">.</span>save<span class="token punctuation">(</span>fileout<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            out<span class="token punctuation">.</span>save<span class="token punctuation">(</span>fileout<span class="token punctuation">,</span> set_img_type<span class="token punctuation">)</span>
</code></pre>
<p>代码简介  </p>
<ul>
<li>filein 图片输入文件名（带路径）。</li>
<li>fileout 图片输出文件名（带路径）。</li>
<li>set_horizontal_length 希望修改成的水平长度，如果为 0，自动使用原图比例和设定的竖直长度计算该值。</li>
<li>set_vertical_length 希望修改成的竖直长度，如果为 0，自动使用原图比例和设定的水平长度计算该值。</li>
<li>img.size 包含了两个值，比如（1080, 1920），第一个值是宽度（水平长度），第二值是高度（竖直长度）。</li>
<li>set_img_type 如果为空，保持原图片类型，如果非空则保存成对应图片类型，比如 <code>set_img_type = &quot;png&quot;</code>，会把图片以 png 数据格式进行保存。</li>
</ul>
<h2 id="PIL-批量处理图片"><a href="#PIL-批量处理图片" class="headerlink" title="PIL 批量处理图片"></a>PIL 批量处理图片</h2><p>上面已经介绍了处理单张图片的方法，想要处理文件夹下的所有图片就要能遍历文件夹里所有的文件。这里使用递归遍历出所有的文件，再分别进行处理。  </p>
<h3 id="使用递归遍历文件夹"><a href="#使用递归遍历文件夹" class="headerlink" title="使用递归遍历文件夹"></a>使用递归遍历文件夹</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check_image</span><span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>

    <span class="token keyword">for</span> lists <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> lists<span class="token punctuation">)</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># TODO: resize image.</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            check_image<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
</code></pre>
<p>代码简介：<br>判断当前文件夹中的每个元素，如果是文件夹则进入该文件夹递归调用，并重复读取判断操作。如果是文件，则在代码中的 TODO 标签处进行相应处理。注：这里默认 image\src 文件夹下不会出现非图片文件。</p>
<h3 id="准备输出工作"><a href="#准备输出工作" class="headerlink" title="准备输出工作"></a>准备输出工作</h3><p>目标是把修改后的图片输出到 image\output 文件夹下，这里需要做三件事，在 output 目录下创建对应 src 目录下的子文件夹，生成图片保存的文件名（带路径），修改生成图片的后缀名。将递归代码修改如下，增加了 find_last_point 函数用于找到后缀名前的小数点来修改后缀名。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> os<span class="token punctuation">.</span>path

<span class="token keyword">def</span> <span class="token function">check_image</span><span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>

    <span class="token keyword">for</span> lists <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> lists<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># handle output path of dir and file</span>
        out_path <span class="token operator">=</span> image_output_dir <span class="token operator">+</span> path<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span> path

        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># handle output file name</span>
            point_position <span class="token operator">=</span> find_last_point<span class="token punctuation">(</span>out_path<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> set_img_type <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>
                out_path <span class="token operator">=</span> out_path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>point_position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> set_img_type
                <span class="token keyword">print</span> out_path
            <span class="token comment" spellcheck="true"># resize image.</span>
            resize_image<span class="token punctuation">(</span>path<span class="token punctuation">,</span> out_path<span class="token punctuation">,</span> horizontal_length<span class="token punctuation">,</span> vertical_length<span class="token punctuation">)</span>

        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># make dir in image\output</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>out_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
                os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>out_path<span class="token punctuation">)</span>
                <span class="token keyword">print</span> out_path
            check_image<span class="token punctuation">(</span>path<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">find_last_point</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    position <span class="token operator">=</span> <span class="token number">0</span>
    temp <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> temp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
        temp <span class="token operator">=</span> file_path<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> temp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            position <span class="token operator">=</span> temp
            file_path <span class="token operator">=</span> file_path<span class="token punctuation">[</span> temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> position
</code></pre>
<h3 id="清理-output-文件夹"><a href="#清理-output-文件夹" class="headerlink" title="清理 output 文件夹"></a>清理 output 文件夹</h3><p>如果只生成不清理，output 文件夹会越来越臃肿，想要找到转换的图片还需要花额外的时间，所以这里选择程序刚开始就删除整个 output 文件夹，并新建一个空的 output 文件夹。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> os<span class="token punctuation">.</span>path
<span class="token keyword">import</span> shutil

<span class="token keyword">def</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>image_output_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>image_output_dir<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>image_output_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>image_output_dir<span class="token punctuation">)</span>
</code></pre>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>PIL 不支持修改为 jpg 后缀，所以如果设置生成 jpg 文件，程序会自动修改成 jpeg 文件。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> os<span class="token punctuation">.</span>path
<span class="token keyword">import</span> shutil
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image

horizontal_length <span class="token operator">=</span> <span class="token number">260</span>
vertical_length <span class="token operator">=</span> <span class="token number">0</span>
image_src_dir <span class="token operator">=</span> r<span class="token string">"image\src"</span>
image_output_dir <span class="token operator">=</span> r<span class="token string">"image\output"</span>
set_img_type <span class="token operator">=</span> <span class="token string">""</span>
<span class="token comment" spellcheck="true"># set_img_type = "bmp"</span>
<span class="token comment" spellcheck="true"># set_img_type = "jpeg"</span>
<span class="token comment" spellcheck="true"># set_img_type = "png"</span>


<span class="token keyword">def</span> <span class="token function">test_run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>image_output_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>image_output_dir<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>image_output_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>image_output_dir<span class="token punctuation">)</span>
    <span class="token keyword">global</span> set_img_type
    <span class="token keyword">if</span> set_img_type <span class="token operator">==</span> <span class="token string">"jpg"</span><span class="token punctuation">:</span>
        set_img_type <span class="token operator">=</span> <span class="token string">"jpeg"</span>
    check_image<span class="token punctuation">(</span>image_src_dir<span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">"finish."</span>


<span class="token keyword">def</span> <span class="token function">resize_image</span><span class="token punctuation">(</span>filein<span class="token punctuation">,</span> fileout<span class="token punctuation">,</span> set_horizontal_length<span class="token punctuation">,</span> set_vertical_length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> set_vertical_length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> set_horizontal_length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>filein<span class="token punctuation">)</span>
        img_size <span class="token operator">=</span> img<span class="token punctuation">.</span>size
        img_horizontal_length <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        img_vertical_length <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> set_vertical_length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            set_vertical_length <span class="token operator">=</span> set_horizontal_length <span class="token operator">*</span> img_vertical_length <span class="token operator">/</span> img_horizontal_length
        <span class="token keyword">if</span> set_horizontal_length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            set_horizontal_length <span class="token operator">=</span> set_vertical_length <span class="token operator">*</span> img_horizontal_length <span class="token operator">/</span> img_vertical_length
        <span class="token keyword">print</span> img_horizontal_length<span class="token punctuation">,</span> img_vertical_length
        <span class="token keyword">print</span> set_horizontal_length<span class="token punctuation">,</span> set_vertical_length
        <span class="token comment" spellcheck="true"># resize image with high-quality</span>
        out <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>set_horizontal_length<span class="token punctuation">,</span> set_vertical_length<span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>
        <span class="token keyword">if</span> set_img_type <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>
            out<span class="token punctuation">.</span>save<span class="token punctuation">(</span>fileout<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            out<span class="token punctuation">.</span>save<span class="token punctuation">(</span>fileout<span class="token punctuation">,</span> set_img_type<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">check_image</span><span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>

    <span class="token keyword">for</span> lists <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> lists<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># handle output path of dir and file</span>
        out_path <span class="token operator">=</span> image_output_dir <span class="token operator">+</span> path<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span> path

        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># handle output file name</span>
            point_position <span class="token operator">=</span> find_last_point<span class="token punctuation">(</span>out_path<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> set_img_type <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>
                out_path <span class="token operator">=</span> out_path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>point_position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> set_img_type
                <span class="token keyword">print</span> out_path
            <span class="token comment" spellcheck="true"># resize image.</span>
            resize_image<span class="token punctuation">(</span>path<span class="token punctuation">,</span> out_path<span class="token punctuation">,</span> horizontal_length<span class="token punctuation">,</span> vertical_length<span class="token punctuation">)</span>

        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># make dir in image\output</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>out_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
                os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>out_path<span class="token punctuation">)</span>
                <span class="token keyword">print</span> out_path
            check_image<span class="token punctuation">(</span>path<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">find_last_point</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    position <span class="token operator">=</span> <span class="token number">0</span>
    temp <span class="token operator">=</span> <span class="token number">0</span>
    i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> temp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
        temp <span class="token operator">=</span> file_path<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> temp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
              position <span class="token operator">=</span> position <span class="token operator">+</span> temp
            <span class="token keyword">else</span><span class="token punctuation">:</span>
              position <span class="token operator">=</span> position <span class="token operator">+</span> temp <span class="token operator">+</span> <span class="token number">1</span>
            file_path <span class="token operator">=</span> file_path<span class="token punctuation">[</span>temp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            i <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> position


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    test_run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-批量处理图片大小&quot;&gt;&lt;a href=&quot;#Python-批量处理图片大小&quot; class=&quot;headerlink&quot; title=&quot;Python 批量处理图片大小&quot;&gt;&lt;/a&gt;Python 批量处理图片大小&lt;/h1&gt;&lt;p&gt;写博客，文档的时候常常要附上很多图片
    
    </summary>
    
      <category term="Python" scheme="https://bearzpy.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://bearzpy.github.io/tags/Python/"/>
    
      <category term="Python2" scheme="https://bearzpy.github.io/tags/Python2/"/>
    
      <category term="图片处理" scheme="https://bearzpy.github.io/tags/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    
      <category term="实用工具" scheme="https://bearzpy.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计原则</title>
    <link href="https://bearzpy.github.io/2016/07/10/Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://bearzpy.github.io/2016/07/10/Java/面向对象设计原则/</id>
    <published>2016-07-10T07:21:58.000Z</published>
    <updated>2018-04-11T03:12:30.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h1><p>在 程序设计领域， SOLID（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）是由罗伯特·C·马丁在 21 世纪早期引入的记忆术首字母缩略字，指代了面向对象编程和面向对象设计的五个基本原则。应对不断改变的需求就会有新的规则出现，包括迪米特原则等。</p>
<h2 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则 SRP"></a>单一职责原则 SRP</h2><p>单一原则的定义就是：就一个类而言，应该仅有一个引起他变化的原因，一个类中应该是一组相关性很高的函数。简单的来说就是一个类只应该负责一件事。因为单一职责的划分界限并不能总那么清晰，所以常常是靠个人经验来划分的。</p>
<p>eg：网络图片加载，可以分为，网络下载，图片显示，图片缓存等部分。如果写出一个类，这个类就会非常的臃肿，难以修改。所以我们需要根据具体的业务、功能对类进行相应的拆分。</p>
<h2 id="开闭原则-OCP"><a href="#开闭原则-OCP" class="headerlink" title="开闭原则 OCP"></a>开闭原则 OCP</h2><p>开闭原则的定义是：软件中的对象(类，模块，函数等)应该对于扩展是开放的，对于修改是闭合的。这是 Java 世界最基础的设计原则。<br>类的实现只应该因错误而修改，新的或者改变的特性应该通过新建不同的类实现。应该尽量通过拓展的方式来实现变化，而不是通过修改原先的代码。我们可以使用抽象化接口来实现这个目标。开闭原则强调的是让程序更加稳定，灵活。</p>
<p>eg: 网络图片加载中的图片缓存功能可以包含内存缓存，磁盘缓存，或者混合缓存。他们的共性就是都有存放、读取缓存的功能，这个存放、读取的功能就可以抽象出来作为一个接口。新的缓存方式只要实现这个接口就能在原先的代码里使用。</p>
<h2 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则 LSP"></a>里氏替换原则 LSP</h2><p>开闭原则的定义是：派生类（子类）对象能够替换其基类（超类）对象被使用，所有引用基类的地方必须能透明的使用其子类的对象。其实还是抽象的实现。里氏替换原则强调的是让程序的拓展性更好。</p>
<p>eg：图片缓存功能中的内存缓存，磁盘缓存，或者混合缓存功能因为实现了读取、存放的接口，所以都可以在网络图片加载器里使用。</p>
<h2 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 ISP"></a>接口隔离原则 ISP</h2><p>接口隔离原则的定义是：类应该不依赖于它不使用的方法。接口隔离原则拆分非常庞大臃肿的接口成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。目的是系统解开耦合，从而容易重构，更改和重新部署。</p>
<p>eg：图片缓存功能中的读取功能，无论是内存缓存还是磁盘缓存，都有自己在读取过程中使用的其他的方法，但是用户读取对这些是不关心的，他只要知道这个是可读的就可以了。</p>
<h2 id="依赖反转原则-DIP"><a href="#依赖反转原则-DIP" class="headerlink" title="依赖反转原则 DIP"></a>依赖反转原则 DIP</h2><p>依赖反转原则指的是一种特定的解耦形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</p>
<p>依赖反转原则有几个关键点：</p>
<ul>
<li>高层模块不应该依赖底层模块</li>
<li>高层、底层模块都应该依赖于抽象需求</li>
<li>抽象不应该依赖细节</li>
<li>细节应该依赖抽象</li>
</ul>
<p>Java 语言中，抽象指的是接口或者抽象类，细节就是实现抽象的类。高层模块就是调用端，底层模块就是实现类。</p>
<p>eg：图片加载器并不直接定义哪种缓存策略，而是定义了一个读取、存放的接口，当用户需要使用具体的缓存策略时，通过依赖注入的方式把实现了抽象接口的类，传递给网络图片加载器即可使用，保证了系统的灵活性。</p>
<h2 id="迪米特原则-LKP"><a href="#迪米特原则-LKP" class="headerlink" title="迪米特原则 LKP"></a>迪米特原则 LKP</h2><p>迪米特原则也称最少知识原则，就是说一个对象应当对其他对象有尽可能少的了解，或者说只与直接面对的人沟通。迪米特法则的初衷在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。迪米特法则不希望类之间建立直接的联系。如果真的有需要建立联系，也希望能通过它的友元类来转达。因此，应用迪米特法则有可能造成的一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互调用关系，这在一定程度上增加了系统的复杂度。</p>
<p>eg: 图片缓存功能里面的内存缓存，用户只需要知道使用的是内存缓存就行了，至于里面使用哪种 API，及其相关用法，对于用户来说是不需要知道的。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象设计原则&quot;&gt;&lt;a href=&quot;#面向对象设计原则&quot; class=&quot;headerlink&quot; title=&quot;面向对象设计原则&quot;&gt;&lt;/a&gt;面向对象设计原则&lt;/h1&gt;&lt;p&gt;在 程序设计领域， SOLID（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）是由罗伯
    
    </summary>
    
      <category term="Android" scheme="https://bearzpy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://bearzpy.github.io/tags/Android/"/>
    
      <category term="Java" scheme="https://bearzpy.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
